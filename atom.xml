<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>haominglfs的博客</title>
  
  <subtitle>Let&#39;s coding!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haominglfs.github.io/"/>
  <updated>2022-03-09T03:28:12.649Z</updated>
  <id>https://haominglfs.github.io/</id>
  
  <author>
    <name>haominglfs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JUnit</title>
    <link href="https://haominglfs.github.io/2022/03/09/JUnit5/"/>
    <id>https://haominglfs.github.io/2022/03/09/JUnit5/</id>
    <published>2022-03-09T09:18:06.000Z</published>
    <updated>2022-03-09T03:28:12.649Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/202203042247917.png" alt></p><a id="more"></a><h2 id="JUnit5"><a href="#JUnit5" class="headerlink" title="JUnit5"></a>JUnit5</h2><p><a href="https://junit.org/junit5/" target="_blank" rel="noopener">JUnit 5</a></p><p><strong>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/202202041746478.png" alt></p><ul><li>第一层 :开发人员 (这里只进行业务开发撰写单元测试) 使用 junit-jupiter-api 等测试框架 api 编写单元测试。</li><li>第二层 : <strong>测试引擎</strong>，JUnit 或其他测试框架实现引擎 API 的框架，jupiter-engine 和 vintage-engine 分别是 junit5 和 junit4 对测试引擎 API 的实现，其他的测试框架也可以通过实现引擎 API 从而接入 JUnit 平台。</li><li>第三层: <strong>平台引擎</strong> junit-platform-engine 是上一层各种引擎实现的抽象，即引擎的接口标准。</li><li>第四层： <strong>启动器</strong> 通过 ServiceLoader 发现测试引擎的实现并安排其执行。 它为 IDE 和构建工具提供了 API，因此 IDE 可以与测试执行交互，例如，通过启动单个测试并显示其结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.fail;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Disabled;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">succeedingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">failingTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fail(<span class="string">"a failing test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Disabled</span>(<span class="string">"for demonstration purposes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">skippedTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// not executed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDownAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/202203042247917.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="单元测试" scheme="https://haominglfs.github.io/categories/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="JUnit" scheme="https://haominglfs.github.io/tags/JUnit/"/>
    
  </entry>
  
  <entry>
    <title>单元测试</title>
    <link href="https://haominglfs.github.io/2022/03/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://haominglfs.github.io/2022/03/09/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2022-03-09T03:15:21.000Z</published>
    <updated>2022-03-09T03:25:39.206Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/202203091125598.png" alt></p><a id="more"></a><h2 id="什么是单元测试"><a href="#什么是单元测试" class="headerlink" title="什么是单元测试"></a>什么是单元测试</h2><p>一个单元测试是一段代码，这段代码调用一个工作单元，并检验该工作单元的一个具体的最终结果。<br>如果关于这个最终结果的假设是错误的，单元测试就失败了。<br>一个单元测试的范围可以小到一个方法，大到一个类。</p><h2 id="单元测试意义"><a href="#单元测试意义" class="headerlink" title="单元测试意义"></a>单元测试意义</h2><p>很多人经常以 “时间紧，任务重” 或者 “单元测试没用” 为借口来拒绝编写单元测试。<br>但是 BUG 在软件的生命周期越早阶段发现，付出的代价越少。<br>单元测试可以让很多 BUG 在编码阶段就能够及时发现并解决，而不需要交给测试人员兜底，如果测试人员兜底失败，可能造成线上故障。<br>有了单元测试作保障，我们还可以放心对函数进行重构，如果重构代码导致单元测试运行失败，则说明重构的代码有问题。<br>长远来看，单元测试对编码的益处（如提高代码质量和避免 BUG）远比编写单元测试的投入所花费的代价要大的多。</p><h2 id="单元测试标准"><a href="#单元测试标准" class="headerlink" title="单元测试标准"></a>单元测试标准</h2><ul><li><p><strong>好的单元测试必须遵守 AIR 原则。</strong></p><p><em>单元测试在线上运行时，感觉像空气(AIR)一样并不存在，但在测试质量的保障上，却是非常关键的。好的单元测试宏观上来说，具有自动化、独立性、可重复执行的特点。</em></p><ul><li><p>A: Automatic(自动化)<br><em>单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用 System.out 来进行人肉验证，必须使用 assert 来验证。</em></p></li><li><p>I: Independent(独立性)<br><em>保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序。</em></p></li><li><p>R: Repeatable(可重复)<br> <em>单元测试是可以重复执行的，不能受到外界环境的影响。</em></p></li></ul></li></ul><h2 id="单元测试结构"><a href="#单元测试结构" class="headerlink" title="单元测试结构"></a>单元测试结构</h2><p>典型的单元测试可分为三个阶段，分别为准备、执行和验证。</p><ul><li>准备阶段: 主要负责创建测试数据、构造mock 方法的返回值，准备环节的编码是单元测试最复杂的部分。需要注意的是 Mockito[[Mockito.md]]] 库中以 when 开头的函数其实是在准备阶段。</li><li>执行阶段: 一般只是调用测试的函数，此部分代码通常较短。  </li><li>验证阶段[[AssertJ.md]]]: 通常验证测试函数的执行的结果、 准备阶段 mock 函数的调用次数等是否符合预期。</li></ul><h2 id="单元测试工具"><a href="#单元测试工具" class="headerlink" title="单元测试工具"></a>单元测试工具</h2><p>常用的 Java 单元测试有: JUnit、TestNG。</p><p>TestNG 受 JUnit 和 NUnit 的启发，功能相似，但是比 JUnit 更强大。TestNG 不只为单元测试而设计，其框架的设计目标是支持单元测试、公共能测试，端对端测试，集成测试等。</p><p>JUnit 具体用法比较简单，最新版本为JUnit5[[JUnit5.md]],如果想系统学习可<a href="https://junit.org/junit5/" target="_blank" rel="noopener">官方使用指南</a>，参考《JUnit 实战 (第 2 版)》, TestNG 和 JUnit 非常相似，如果想深入学习，首推 <a href="https://testng.org/doc/documentation-main.html" title="https://testng.org/doc/documentation-main.html" target="_blank" rel="noopener">TestNG 官方文档</a>。</p><p>主流的 Java mock 框架有: Mockito[[Mockito.md]], JMockit, Easy Mock 。</p><p>Mockito 简洁易用，有 PowerMock 拓展，允许静态函数测试，社区强大，对结果的验证和异常处理非常简洁、灵活。缺点是框架本身不支持 static 和 private 函数的 mock。</p><p>JMockit 简单易用；可以 mock “一切”，包括 final 类， final/private/static 函数，而其他 mock 框架往往只支持其中一部分；缺点是社区支持不够活跃，3 个 contributers 介乎只有一个在干活，学习曲线比较陡峭。</p><p>Easy Mock 上手简单，文档清晰；同样的社区较小，导致更多人选择其它的 mock 框架。</p><p>还有很多其他配合单元测试的框架，如强大的构造随机 Java 对象的 <a href="https://github.com/j-easy/easy-random" title="https://github.com/j-easy/easy-random" target="_blank" rel="noopener">Easy Random</a> ，构造随机字符串的 <a href="https://github.com/DiUS/java-faker" title="https://github.com/DiUS/java-faker" target="_blank" rel="noopener">Java Faker</a> 等。</p><p>验证库有：Hamcrest，AssertJ[[AssertJ.md]]。</p><h2 id="构造单元测试数据的方式"><a href="#构造单元测试数据的方式" class="headerlink" title="构造单元测试数据的方式"></a>构造单元测试数据的方式</h2><p>单元测试的重要环节就是构造测试数据，单元测试构造测试数据往往非常耗时，这也是很多人不喜欢写单元测试的重要原因之一。如下为构造单侧数据的几种方式：</p><h3 id="手动"><a href="#手动" class="headerlink" title="手动"></a>手动</h3><p>手动构造单元测试数据，是指在测试类或者函数中直接声明测试数据(对象属性较多时，比较耗时)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitTest</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> <span class="comment">// Setup  </span></span><br><span class="line"><span class="keyword">final</span> UserInfo userInfo = <span class="keyword">new</span> UserInfo();  </span><br><span class="line"><span class="keyword">final</span> User user = <span class="keyword">new</span> User();  </span><br><span class="line">user.setId(<span class="number">0L</span>);  </span><br><span class="line">user.setOrgId(<span class="number">0L</span>);  </span><br><span class="line">user.setCode(<span class="string">"code"</span>);  </span><br><span class="line">user.setAccount(<span class="string">"account"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="半自动"><a href="#半自动" class="headerlink" title="半自动"></a>半自动</h3><p>半自动构造单元测试数据，是指使用插件自动填充所要构造对象的属性。采用 JSON 序列化和反序列化方式，<br>将构造的对象通过 JSON 序列化到 JSON 文件里，使用时反序列化为Java对象即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitTest</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="comment">// 构造测试数据  </span></span><br><span class="line">UserInfo userInfo = ResourceUtil.parseJson(UserInfo.class, <span class="string">"/data/userInfo.json"</span>);  </span><br><span class="line">log.info(<span class="string">"构造的数据:&#123;&#125;"</span>, JSON.toJSONString(userInfo));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动"><a href="#自动" class="headerlink" title="自动"></a>自动</h3><p>半自动的方式构造单元测试数据效率仍然不够高，而且缺乏灵活性，比如需要构造随机属性的对象，需要构造不同属性的 N 个对象，就会造成编码复杂度陡增。<br>因此，  <a href="https://github.com/DiUS/java-faker" title="https://github.com/DiUS/java-faker" target="_blank" rel="noopener">Java Faker</a> 和 <a href="https://github.com/j-easy/easy-random" title="https://github.com/j-easy/easy-random" target="_blank" rel="noopener">Easy Random</a>  应运而生。</p><h4 id="java-faker"><a href="#java-faker" class="headerlink" title="java-faker"></a>java-faker</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FakeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 指定语言</span></span><br><span class="line">Faker faker = <span class="keyword">new</span> Faker(<span class="keyword">new</span> Locale(<span class="string">"zh-CN"</span>));</span><br><span class="line"><span class="comment">// 姓名</span></span><br><span class="line">String name = faker.name().fullName();</span><br><span class="line">log.info(name);</span><br><span class="line">String firstName = faker.name().firstName();</span><br><span class="line">String lastName = faker.name().lastName();</span><br><span class="line">log.info(lastName + firstName);</span><br><span class="line"><span class="comment">// 街道</span></span><br><span class="line">String streetAddress = faker.address().streetAddress();</span><br><span class="line">log.info(streetAddress);</span><br><span class="line"><span class="comment">// 颜色</span></span><br><span class="line">Color color = faker.color();</span><br><span class="line">log.info(color.name() + <span class="string">"--&gt;"</span> + color.hex());</span><br><span class="line"><span class="comment">// 大学</span></span><br><span class="line">University university = faker.university();</span><br><span class="line">log.info(university.name() + <span class="string">"--&gt;"</span> + university.prefix()+<span class="string">":"</span>+university.suffix());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="easy-random"><a href="#easy-random" class="headerlink" title="easy-random"></a>easy-random</h4><p>easy-random 可以轻松构造复杂对象，支持定义对象中集合长度，字符串长度范围，生成集合等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EasyRandomTest</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> EasyRandom easyRandom;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customRandomzierForFieldsShouldBeUsedToPopulateObjects</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"> EasyRandomParameters parameters = <span class="keyword">new</span> EasyRandomParameters()  </span><br><span class="line">            .randomize(named(<span class="string">"name"</span>).and(ofType(String.class)).and(inClass(Human.class)), randomizer);  </span><br><span class="line"> easyRandom = <span class="keyword">new</span> EasyRandom(parameters);  </span><br><span class="line"> Person person = easyRandom.nextObject(Person.class);  </span><br><span class="line"> assertThat(person).isNotNull();  </span><br><span class="line"> assertThat(person.getName()).isEqualTo(FOO);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/202203091125598.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="单元测试" scheme="https://haominglfs.github.io/categories/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="单元测试" scheme="https://haominglfs.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>kvm</title>
    <link href="https://haominglfs.github.io/2021/12/31/2021-12-31-kvm/"/>
    <id>https://haominglfs.github.io/2021/12/31/2021-12-31-kvm/</id>
    <published>2021-12-31T14:15:21.000Z</published>
    <updated>2022-01-06T02:42:15.532Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="mariadb" scheme="https://haominglfs.github.io/categories/mariadb/"/>
    
    
      <category term="mariadb" scheme="https://haominglfs.github.io/tags/mariadb/"/>
    
      <category term="galera" scheme="https://haominglfs.github.io/tags/galera/"/>
    
      <category term="haproxy" scheme="https://haominglfs.github.io/tags/haproxy/"/>
    
      <category term="keepalived" scheme="https://haominglfs.github.io/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>MariaDB+Galera集群+haproxy+keepalived</title>
    <link href="https://haominglfs.github.io/2020/11/23/MariaDB-Galera%E9%9B%86%E7%BE%A4-haproxy-keepalived/"/>
    <id>https://haominglfs.github.io/2020/11/23/MariaDB-Galera%E9%9B%86%E7%BE%A4-haproxy-keepalived/</id>
    <published>2020-11-23T14:15:21.000Z</published>
    <updated>2021-12-31T09:52:18.986Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201123230920.png" style="zoom:150%;"></p><a id="more"></a><h3 id="Galera集群"><a href="#Galera集群" class="headerlink" title="Galera集群"></a>Galera集群</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><p>Galera集群至少需要三个节点的服务器硬件，以下操作在三个节点执行。安装后，在任意一个节点执行SQL，都是同步的。</p><p>现有三台服务器，ip分别为10.30.1.14、10.30.1.15、10.30.1.16。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>3台服务器的主机名修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname node1</span><br><span class="line">hostnamectl set-hostname node2</span><br><span class="line">hostnamectl set-hostname node3</span><br></pre></td></tr></table></figure></li><li><p>3台服务器的hosts文件修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.30.1.14 node1</span><br><span class="line">10.30.1.15 node2</span><br><span class="line">10.30.1.16 node3</span><br></pre></td></tr></table></figure></li><li><p>建立3台服务器之间的SSH免密通信（3台服务器执行）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br></pre></td></tr></table></figure></li><li><p>3台服务器关闭Selinux:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config</span><br></pre></td></tr></table></figure></li><li><p>3台服务器关闭防火墙或者添加端口允许:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3306  MySQL client connections and mysqldump SST</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4567  Galera Cluster replication traffic</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4567/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4568  IST</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4444  all SSTs besides mysqldump</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4444/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>3台服务器设置Yum源:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">cat &gt;&gt; mariadb.repo &lt;&lt;EOF</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = https://mirrors.ustc.edu.cn/mariadb/yum/10.4/centos7-amd64</span><br><span class="line">gpgkey=https://mirrors.ustc.edu.cn/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>3台服务器安装软件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install MariaDB-server MariaDB-client galera-4 -y</span><br></pre></td></tr></table></figure></li><li><p>3台服务器配置远程访问:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'d001!'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></li><li><p>3台服务器配置编码为utf-8,编辑配置文件vi /etc/my.cnf:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake = FALSE</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect='SET NAMES utf8mb4'</span><br></pre></td></tr></table></figure></li></ol><h4 id="galera集群配置"><a href="#galera集群配置" class="headerlink" title="galera集群配置"></a>galera集群配置</h4><ol><li><p>编辑Node1上的/etc/my.cnf.d/server.cnf 添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[galera]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Mandatory settings</span></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address="gcomm://10.30.1.14,10.30.1.15,10.30.1.16" #整个集群的IP地址</span><br><span class="line">binlog_format=row # binlog文件格式：行</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"><span class="meta">#</span><span class="bash"> Allow server to accept connections on all interfaces.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span>-address=0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Optional setting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wsrep_slave_threads=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> innodb_flush_log_at_trx_commit=0</span></span><br><span class="line">wsrep_provider_options="gcache.size=1G"</span><br><span class="line">wsrep_cluster_name=MariaDB-Galera-Cluster</span><br><span class="line">wsrep_node_name=node1 #hostname，对应前面网路配置/etc/hosts</span><br><span class="line">wsrep_node_address=10.30.1.14 #机器IP地址</span><br><span class="line">wsrep_sst_method=rsync #拷贝模式xtrabackup-v2 或者 rsync</span><br></pre></td></tr></table></figure></li><li><p>编辑Node2上的/etc/my.cnf.d/server.cnf 添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[galera]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Mandatory settings</span></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address="gcomm://10.30.1.14,10.30.1.15,10.30.1.16" #整个集群的IP地址</span><br><span class="line">binlog_format=row # binlog文件格式：行</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"><span class="meta">#</span><span class="bash"> Allow server to accept connections on all interfaces.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span>-address=0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Optional setting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wsrep_slave_threads=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> innodb_flush_log_at_trx_commit=0</span></span><br><span class="line">wsrep_provider_options="gcache.size=1G"</span><br><span class="line">wsrep_cluster_name=MariaDB-Galera-Cluster</span><br><span class="line">wsrep_node_name=node2 #hostname，对应前面网路配置/etc/hosts</span><br><span class="line">wsrep_node_address=10.30.1.15 #机器IP地址</span><br><span class="line">wsrep_sst_method=rsync #拷贝模式xtrabackup-v2 或者 rsync</span><br></pre></td></tr></table></figure></li><li><p>编辑Node3上的/etc/my.cnf.d/server.cnf 添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[galera]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Mandatory settings</span></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera-4/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address="gcomm://10.30.1.14,10.30.1.15,10.30.1.16" #整个集群的IP地址</span><br><span class="line">binlog_format=row # binlog文件格式：行</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"><span class="meta">#</span><span class="bash"> Allow server to accept connections on all interfaces.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span>-address=0.0.0.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Optional setting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wsrep_slave_threads=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> innodb_flush_log_at_trx_commit=0</span></span><br><span class="line">wsrep_provider_options="gcache.size=1G"</span><br><span class="line">wsrep_cluster_name=MariaDB-Galera-Cluster</span><br><span class="line">wsrep_node_name=node3 #hostname，对应前面网路配置/etc/hosts</span><br><span class="line">wsrep_node_address=10.30.1.16 #机器IP地址</span><br><span class="line">wsrep_sst_method=rsync #拷贝模式xtrabackup-v2 或者 rsync</span><br></pre></td></tr></table></figure></li><li><p>启动集群</p><ul><li><p>启动第一个节点，底层命令是：mysqld –wsrep-new-cluster</p><p><code>galera_new_cluster</code></p></li><li><p>在其他节点上启动服务</p><p><code>systemctl start mariadb.service</code></p></li><li><p>主节点中添加集群认证用户galera，密码galera（可选）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON *.* TO 'galera'@'%' IDENTIFIED BY 'galera' WITH GRANT OPTION;</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>故障排查</p><blockquote><p>启动集群时报错[ERROR] WSREP: It may not be safe to bootstrap the cluster from this node. It was not the last one to leave the cluster and may not contain all the updates.</p><p><code>打开文件/var/lib/mysql/grastate.dat，修改safe_to_bootstrap的值置为1</code></p></blockquote></li></ul></li><li><p>集群测试</p><ul><li><p>确认集群启动成功（返回当前的集群节点数量）</p><p><code>mysql&gt; show status like &#39;wsrep_cluster_size&#39;;</code></p></li><li><p>查看galera状态</p><p><code>mysql&gt; show status like &#39;wsrep%&#39;;</code></p></li></ul></li></ol><h3 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a>HAProxy</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><code>yum install -y haproxy</code></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>编辑HAProxy配置文件 <code>vi /etc/haproxy/haproxy.cfg</code>,配置如下(两台haproxy服务器配置相同):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line">    chroot      /var/lib/haproxy</span><br><span class="line">    pidfile     /var/run/haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line">    </span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  tcplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    #option forwardfor       except 127.0.0.0/8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line">    </span><br><span class="line">listen galera</span><br><span class="line">    bind 0.0.0.0:13306</span><br><span class="line">    balance roundrobin</span><br><span class="line">    mode tcp</span><br><span class="line">    option tcpka</span><br><span class="line">    option mysql-check user haproxy</span><br><span class="line">    server galera-mariadb-1 192.168.123.36:3306 check weight 1</span><br><span class="line">    server galera-mariadb-2 192.168.123.35:3306 check weight 1</span><br><span class="line">    server galera-mariadb-3 192.168.123.34:3306 check weight 1</span><br><span class="line">    </span><br><span class="line">listen stats</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># HAProxy stats web gui running on port 9000 - username and password: haproxy.</span></span></span><br><span class="line">    bind 0.0.0.0:9000</span><br><span class="line">    mode http</span><br><span class="line">    stats enable</span><br><span class="line">    stats uri /stats</span><br><span class="line">    stats realm HAProxy\ Statistics</span><br><span class="line">    stats auth haproxy:haproxy</span><br><span class="line">    stats admin if TRUE</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>systemctl start haproxy</code></p><h3 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><ol><li><p>创建依赖环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl-devel gcc gcc-c++</span><br><span class="line">mkdir /etc/keepalived</span><br><span class="line">wget https://www.keepalived.org/software/keepalived-2.0.18.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装keepalived:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf keepalived-2.0.18.tar.gz</span><br><span class="line">mv keepalived-2.0.18 /usr/local/keepalived</span><br><span class="line">cd /usr/local/keepalived</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><p><code>systemctl enable keepalived</code></p></li></ol><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ol><li><p>编辑haproxy检测脚本，<code>vi /etc/keepalived/chk_haproxy.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">chkha=`ps -C haproxy --no-header |wc -l`</span><br><span class="line">if [ $chkha -eq 0 ];then</span><br><span class="line">  systemctl stop keepalived</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>赋予脚本执行权限</p><p><code>chmod  +x chk_haproxy.sh</code></p></li><li><p>编辑keepalived主配置文件，<code>vi /etc/keepalived/keepalived.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id Haproxy1  #服务器标识</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script "/etc/keepalived/chk_haproxy.sh"</span><br><span class="line">    interval 1  #（检测脚本执行的间隔，单位是秒)</span><br><span class="line">    weight 2#权重</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER     #指定keepalived的角色，MASTER为主，BACKUP为备</span><br><span class="line">    interface eth0   #绑定的网卡</span><br><span class="line">    virtual_router_id 201   #虚拟路由编号，主从要一直</span><br><span class="line">    priority 100     #优先级，数值越大，获取处理请求的优先级越高</span><br><span class="line">    advert_int 1#检查间隔，默认为1s(vrrp组播周期秒数)</span><br><span class="line">    authentication &#123;  #设置验证类型和密码，MASTER和BACKUP必须使用相同的密码才能正常通信</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy   #调用检测脚本）</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">       10.30.1.26     #定义虚拟ip(VIP)，可多设，每行一个</span><br><span class="line">    &#125;</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑keepalived备配置文件，<code>vi /etc/keepalived/keepalived.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id Haproxy2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script "/etc/keepalived/chk_haproxy.sh"</span><br><span class="line">    interval 1</span><br><span class="line">    weight 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0</span><br><span class="line">    virtual_router_id 201</span><br><span class="line">    priority 99</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.123.44</span><br><span class="line">    &#125;</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果开启了防火墙，需打开如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-rich-rule='rule protocol value="vrrp" accept' --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure></li><li><p>启动keepalived</p><p><code>systemctl start keepalived</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20201123230920.png&quot; style=&quot;zoom:150%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mariadb" scheme="https://haominglfs.github.io/categories/mariadb/"/>
    
    
      <category term="mariadb" scheme="https://haominglfs.github.io/tags/mariadb/"/>
    
      <category term="galera" scheme="https://haominglfs.github.io/tags/galera/"/>
    
      <category term="haproxy" scheme="https://haominglfs.github.io/tags/haproxy/"/>
    
      <category term="keepalived" scheme="https://haominglfs.github.io/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>rabbitMQ集群</title>
    <link href="https://haominglfs.github.io/2020/10/21/rabbitMQ%E9%9B%86%E7%BE%A4/"/>
    <id>https://haominglfs.github.io/2020/10/21/rabbitMQ%E9%9B%86%E7%BE%A4/</id>
    <published>2020-10-21T13:36:20.000Z</published>
    <updated>2020-11-23T14:16:20.348Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021230114.png" alt></p><a id="more"></a><h3 id="单一模式"><a href="#单一模式" class="headerlink" title="单一模式"></a>单一模式</h3><p>参考<a href="https://blog.haomingzx.top/2020/02/22/RabbitMQ%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">https://blog.haomingzx.top/2020/02/22/RabbitMQ%E5%AD%A6%E4%B9%A0/</a></p><blockquote><p>登录rabbitmq报错User can only log in via localhost?</p><p>配置文件/etc/rabbitmq/添加 如下配置</p><p><code>loopback_users = none</code></p></blockquote><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><p>默认的集群模式。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><table><thead><tr><th><strong>IP地址</strong></th><th><strong>主机名</strong></th><th><strong>操作系统</strong></th><th><strong>防火墙和SELinux</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>192.168.56.114</td><td>mq1</td><td>CentOS7(64位)</td><td>关闭</td><td>磁盘节点</td></tr><tr><td>192.168.56.115</td><td>mq2</td><td>CentOS7(64位)</td><td>关闭</td><td>内存节点</td></tr></tbody></table><blockquote><p>RabbitMQ集群节点必须在同一网段里，如果是跨广域网，效果会变差。</p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li><p>修改主机名  <code>vi /etc/hostname</code>，mq2相同操作,修改后需要重启系统生效。</p><p><code>mq1.localdomain</code></p></li><li><p>修改hosts文件 <code>vi /etc/hosts</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.56.114 mq1</span><br><span class="line">192.168.56.125 mq2</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>拷贝erlang.cookie</p><p>Rabbitmq的集群是依附于erlang的集群来工作的,所以必须先构建起erlang的集群景象。Erlang的集群中各节点是经由过程一个magic cookie来实现的,这个cookie存放在/var/lib/rabbitmq/.erlang.cookie中，文件是400的权限。所以必须保证各节点cookie一致,不然节点之间就无法通信。</p></li><li><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins list //查看插件安装情况</span><br><span class="line">rabbitmq-plugins enable rabbitmq_management //启用rabbitmq_management服务</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>将mq1作为内存节点加入mq1节点集群中，在mq2执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app    //停掉rabbit应用</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@mq1 //加入到磁盘节点 ram表示内存节点</span><br><span class="line">rabbitmqctl start_app  //启动rabbit应用</span><br></pre></td></tr></table></figure></li><li><p>查看集群状态</p><p><code>rabbitmqctl cluster_status</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021223926.png" alt></p></li><li><p>更改节点类型</p><blockquote><p><strong>内存节点</strong>： 内存节点将所有的队列、交换机、绑定、用户、权限和 vhost 的元数据定义存储在内存中，好处是可以使得像交换机和队列声明等操作更加的快速。例外情况是：持久的 queue 的内容将被保存到磁盘。 </p><p><strong>磁盘节点</strong>： 将元数据存储在磁盘中，单节点系统只允许磁盘类型的节点，防止重启 RabbitMQ 的时候，丢失系统的配置信息。  </p><p><strong>注意点：</strong>   </p><p>1、内存节点由于不进行磁盘读写，它的性能比磁盘节点高。    </p><p>2、集群中可以存在多个磁盘节点，磁盘节点越多整个集群可用性越好，但是集群整体性能不会线性增加，需要权衡考虑。    </p><p>3、RabbitMQ 要求在集群中至少有一个磁盘节点，所有其他节点可以是内存节点，当节点加入或者离开集群时，必须要将该变更通知到至少一个磁盘节点。如果集群中唯一的一个磁盘节点崩溃的话，集群仍然可以保持运行，但是无法进行其他操作（增删改查），直到节点恢复。    </p><p>4、设置两个磁盘节点，至少有一个是可用的，可以保存元数据的更改。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止节点 </span></span><br><span class="line">sbin/rabbitmqctl stop_app </span><br><span class="line"><span class="meta">#</span><span class="bash"> 与集群通讯，从集群中删除节点 </span></span><br><span class="line">sbin/rabbitmqctl reset </span><br><span class="line"><span class="meta">#</span><span class="bash"> 以RAM模式重新加入集群 </span></span><br><span class="line">sbin/rabbitmqctl join_cluster rabbit@MQ1 --ram </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动节点 </span></span><br><span class="line">sbin/rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>节点单机状态时，reset 命令将清空节点的状态，并将其恢复到空白状态。当节点是集群的一部分时，该命令也会和集群中的磁盘节点通信，告诉他们该节点正在离开集群。</p><p>这很重要，不然，集群会认为该节点出了故障，并期望其最终能够恢复回来，在该节点回来之前，集群禁止新的节点加入。</p></li></ol><h3 id="镜像模式"><a href="#镜像模式" class="headerlink" title="镜像模式"></a>镜像模式</h3><p>把需要的队列做成镜像队列，存在于多个节点，属于RabbiMQ的HA方案，在对业务可靠性要求较高的场合中比较适用；要实现镜像模式，需要先搭建一个普通集群模式，在这个模式的基础上再配置镜像模式以实现高可用。</p><p>上面已经完成RabbitMQ默认集群模式，但并不保证队列的高可用性，尽管交换机、绑定这些可以复制到集群里的任何一个节点，但是队列内容不会复制。虽然该模式解决一项目组节点压力，但队列节点宕机直接导致该队列无法应用，只能等待重启，所以要想在队列节点宕机或故障也能正常应用，就要复制队列内容到集群里的每个节点，必须要创建镜像队列。</p><p>镜像队列是基于普通的集群模式的，然后再添加一些策略，所以你还是得先配置普通集群，然后才能设置镜像队列，我们就以上面的集群接着做。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><h5 id="图形界面配置"><a href="#图形界面配置" class="headerlink" title="图形界面配置"></a>图形界面配置</h5><ol><li><p>登录控制台 <a href="http://192.168.56.114:15672/#/" target="_blank" rel="noopener">http://192.168.56.114:15672/#/</a></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021230318.png" alt></p><ul><li>Name:策略名称</li><li>Pattern：匹配的规则，这里表示匹配a开头的队列，如果是匹配所有的队列，那就是^.</li><li>Definition:使用ha-mode模式中的all，也就是同步所有匹配的队列。问号链接帮助文档。</li></ul></li></ol><h5 id="命令行配置"><a href="#命令行配置" class="headerlink" title="命令行配置"></a>命令行配置</h5><p><code>rabbitmqctl set_policy &lt;name&gt; [-p &lt;vhost&gt;] &lt;pattern&gt; &lt;definition&gt; [--apply-to &lt;apply-to&gt;]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">name: 策略名称    </span><br><span class="line">vhost: 指定vhost, 默认值 /    </span><br><span class="line">pattern: 通过正则表达式匹配哪些需要镜像, ^为所有    </span><br><span class="line">definition:         </span><br><span class="line">ha-mode: 指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class="line">all     表示在集群所有的节点上进行镜像，无需设置ha-params            </span><br><span class="line">exactly 表示在指定个数的节点上进行镜像，节点的个数由ha-params指定             </span><br><span class="line">nodes   表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><br><span class="line">ha-params: </span><br><span class="line">ha-mode 模式需要用到的参数         </span><br><span class="line">ha-sync-mode: 镜像队列中消息的同步方式，有效值为automatic，manually    </span><br><span class="line">apply-to: 策略作用对象。可选值3个，默认all </span><br><span class="line">exchanges 表示镜像 exchange       </span><br><span class="line">queues    表示镜像 queue        </span><br><span class="line">all       表示镜像 exchange和queue</span><br></pre></td></tr></table></figure><p>示例命令：</p><p><code>rabbitmqctl set_policy admin &quot;^&quot; &#39;{&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;}&#39;</code></p><table><thead><tr><th><strong>ha-mode</strong></th><th><strong>ha-params</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>all</td><td>空</td><td>镜像队列将会在整个集群中复制。当一个新的节点加入后，也会在这 个节点上复制一份。</td></tr><tr><td>exactly</td><td>count</td><td>镜像队列将会在集群上复制 count 份。如果集群数量少于 count 时候，队列会复制到所有节点上。如果大于 Count 集群，有一个节点 crash 后，新进入节点也不会做新的镜像。</td></tr><tr><td>nodes</td><td>node name</td><td>镜像队列会在 node name 中复制。如果这个名称不是集群中的一个，这不会触发错误。如果在这个 node list 中没有一个节点在线，那么这个 queue 会被声明在 client 连接的节点。</td></tr></tbody></table><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.51cto.com/11134648/2155934" target="_blank" rel="noopener">https://blog.51cto.com/11134648/2155934</a></p><p><a href="https://www.rabbitmq.com/access-control.html#default-state" target="_blank" rel="noopener">https://www.rabbitmq.com/access-control.html#default-state</a></p><p><a href="https://www.cnblogs.com/passzhang/p/13207426.html" target="_blank" rel="noopener">https://www.cnblogs.com/passzhang/p/13207426.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20201021230114.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="rabbitMQ" scheme="https://haominglfs.github.io/categories/rabbitMQ/"/>
    
    
      <category term="rabbitMQ" scheme="https://haominglfs.github.io/tags/rabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>redis高可用方案</title>
    <link href="https://haominglfs.github.io/2020/10/21/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/"/>
    <id>https://haominglfs.github.io/2020/10/21/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/</id>
    <published>2020-10-21T07:43:03.000Z</published>
    <updated>2020-10-21T13:24:46.604Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021212318.png" style="zoom:150%;"></p><a id="more"></a><h3 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>下载安装包</p><p><a href="http://download.redis.io/releases/redis-5.0.4.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.14.tar.gz</a></p></li><li><p>解压文件</p><p><code>tar -xzvf redis-4.0.14.tar.gz</code></p></li><li><p>编译安装</p><p><code>make &amp;&amp; make install</code></p></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li><p>在/usr/local/redis/redis4.0.14目录下复制redis.conf到/etc/redis/目录下，修改配置文件</p><ul><li><p>端口：port 6379</p></li><li><p>后台启动：daemonize yes</p></li><li><p>日志文件输出名字：logfile ./redis.log (需要手动创建文件)</p></li><li><p>文件存储目录：dir /usr/local/redis/log (需要手动创建文件夹)</p></li><li><p>连接redis密码：requirepass dcits001!</p></li><li><p>允许任何人连接redis：bind 0.0.0.0</p></li><li><p>tcp-backlog修改为2048并执行echo 511 &gt; /proc/sys/net/core/somaxconn</p><p>要不启动会出现警告：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021155843.png" alt></p></li></ul></li><li><p>将下列内容添加到/etc/sysctl.conf中,保存退出, 执行sysctl -p 配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.core.somaxconn = 1024 </span><br><span class="line">vm.overcommit_memory = 1</span><br></pre></td></tr></table></figure></li><li><p>将<code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</code>添加到<code>/etc/rc.local</code>中,执行<code>source /etc/rc.local</code>生效配置。</p></li></ol><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><ol><li><p>在<code>/usr/local/redis/redis-4.0.14/utils</code>目录下，执行<code>./install_server.sh</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021160053.png" alt> </p></li><li><p>设为开机启动</p><p><code>chkconfig redis_6379 on</code></p></li><li><p>常用启动及停止命令</p><p><code>service redis_6379 start</code></p><p><code>service redis_6379 stop</code></p><blockquote><p>如果停止失败，出现:</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021160225.png" alt></p><p>是由于设置密码的原因,修改 /etc/init.d/redis_6379</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021160259.png" alt></p></blockquote></li><li><p>打开防火墙并开放6379端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld #查看防火墙状态</span><br><span class="line">systemctl start firewalld #打开防火墙</span><br><span class="line">systemctl stop firewalld #关闭防火墙</span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口</span><br><span class="line">firewall-cmd --zone=public --remove-port=6379/tcp --permanent  #关闭6379端口</span><br><span class="line">firewall-cmd –reload  #配置立即生效</span><br></pre></td></tr></table></figure></li></ol><h3 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h3><p>开启两台redis从服务器，可以位于两台服务器或同一台服务器的不同端口。</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><ol><li><p>master的redis配置文件只要设置好bind即可</p><p><code>bind 0.0.0.0</code></p></li><li><p>修改slave的redis配置文件,如果master设置了验证密码，还需配置masterauth</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slaveof 192.168.56.112 6379 (映射到主服务器上，6379是端口号)</span><br><span class="line">masterauth d001!</span><br></pre></td></tr></table></figure></li><li><p>配置完之后启动slave的Redis服务</p><p><code>service redis_6379 restart</code></p></li></ol><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021161339.png" alt></p><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><ol><li><p>Sentinel可以切换主从数据库，主数据库可能会变成从数据库，所以三台机器上都需要同时设置requirepass和masterauth配置项。编辑 /etc/redis/redis.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requirepass d001!</span><br><span class="line">masterauth d001!</span><br></pre></td></tr></table></figure></li><li><p>配置sentinel配置文件 /etc/redis/sentinel.conf，每个sentinel配置基本相同，内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">port 26379</span><br><span class="line">bind 192.168.56.112  #每个主机该配置不同</span><br><span class="line">sentinel monitor redis-master 192.168.56.112 6379 2</span><br><span class="line">sentinel down-after-milliseconds redis-master 5000</span><br><span class="line">sentinel failover-timeout redis-master 180000</span><br><span class="line">sentinel parallel-syncs redis-master 2</span><br><span class="line">sentinel auth-pass redis-master dctis001!</span><br><span class="line">sentinel notification-script redis-master /etc/redis/notify.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">sentinel client-reconfig-script mymaster /etc/redis/failover.sh</span></span><br><span class="line">logfile /var/log/redis/redis-sentinel.log</span><br></pre></td></tr></table></figure><ul><li><p><code>daemonize yes</code> 以后台进程模式运行。</p></li><li><p><code>port 26379</code>  Sentinel实例之间的通讯端口，该端口号默认为26379。</p></li><li><p><code>bind 192.168.56.112</code>  Sentinel默认会绑定到127.0.0.1，这里要在多台机器间通信，我们将它绑定到主机IP上。</p></li><li><p><code>sentinel monitor redis-master 192.168.56.112 6379 2</code></p><p>Sentinel去监视一个名为redis-master的主服务器，这个主服务器的IP地址为192.168.56.112 ，端口号为6379。将这个主服务器判断为失效至少需要2个Sentinel同意，一般设置为N/2+1(N为Sentinel总数)。只要同意Sentinel的数量不达标，自动故障迁移就不会执行。</p></li><li><p><code>sentinel down-after-milliseconds redis-master 5000</code></p><p>down-after-milliseconds选项指定了Sentinel认为服务器已经断线所需的毫秒数。如果服务器在给定的毫秒数之内，没有返回Sentinel发送的PING命令的回复，或者返回一个错误，那么Sentinel将这个服务器标记为主观下线(subjectively down，简称SDOWN)。</p></li><li><p><code>sentinel failover-timeout redis-master 180000</code></p><p>如果在多少毫秒内没有把宕掉的那台Master恢复，那Sentinel认为这是一次真正的宕机。在下一次选取时排除该宕掉的Master作为可用的节点，然后等待一定的设定值的毫秒数后再来探测该节点是否恢复，如果恢复就把它作为一台Slave加入Sentinel监测节点群，并在下一次切换时为他分配一个”选取号”。</p></li><li><p><code>sentinel parallel-syncs redis-master 2</code></p><p>parallel-syncs选项指定了在执行故障转移时，最多可以有多少个从服务器同时对新的主服务器进行同步。这个数字越小，完成故障转移所需的时间就越长。</p></li><li><p><code>sentinel auth-pass redis-master d001!</code></p><p>当Master设置了密码时，Sentinel连接Master和Slave时需要通过设置参数auth-pass配置相应密码。</p></li><li><p><code>sentinel notification-script redis-master /etc/redis/notify.sh</code></p><p>指定Sentinel检测到该监控的Redis实例failover时调用的报警脚本。脚本被允许执行的最大时间为60秒，超过这个时间脚本会被kill。该配置项可选，但线上系统建议配置。这里的通知脚本简单的记录一下failover事件。</p></li><li><p><code>sentinel client-reconfig-script redis-master /etc/redis/failover.sh</code></p><p>指定Sentinel failover之后重配置客户端时执行的脚本，该配置项可选，但线上系统建议配置。</p></li><li><p><code>logfile /var/log/redis/redis-sentinel.log</code></p><p>日志文件所在位置，默认在/var/log/redis/redis-sentinel.log。该文件要手动创建。</p></li></ul></li><li><p>创建通知脚本/etc/redis/notify.sh，并增加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">echo "master failovered at `date`" &gt; /var/log/redis/redis_issues.log</span><br></pre></td></tr></table></figure><p><code>chmod +x /etc/redis/notify.sh</code></p></li><li><p>运行sentinel</p><p><code>redis-sentinel /etc/redis/sentinel.conf</code></p></li></ol><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><ol><li><p>将redis预设脚本复制到 /etc/init.d/ 中</p><p><code>cp ~/redis-4.0.14/utils/redis_init_script /etc/init.d/redis_sentinel</code></p></li><li><p>调整脚本内容 vi /etc/init.d/redis_sentinel</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021163036.png" alt></p><ul><li><code>REDISPORT</code>  默认为26379,但只要和其他端口不重复就行</li><li><code>EXEC</code>  /usr/local/bin/redis-sentinel  指定redis-sentinel命令路径</li><li><code>CONF</code> /etc/redis/sentinel.conf  配置文件路径</li></ul></li><li><p>建立systemd,  vi /etc/systemd/system/redis_sentinel.service，内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit] </span><br><span class="line">Description=Redis Sentinel on port 26379</span><br><span class="line">    </span><br><span class="line">[Service] </span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/init.d/redis_sentinel start</span><br><span class="line">ExecStop=/etc/init.d/redis_sentinel stop</span><br><span class="line">    </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>更新systemd配置</p><p><code>systemctl daemon-reload</code></p></li><li><p>设置开机自启动</p><p><code>systemctl enable redis_sentinel.service</code></p></li></ol><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20201021212318.png&quot; style=&quot;zoom:150%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://haominglfs.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://haominglfs.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql高可用方案</title>
    <link href="https://haominglfs.github.io/2020/10/19/mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/"/>
    <id>https://haominglfs.github.io/2020/10/19/mysql%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/</id>
    <published>2020-10-19T08:19:55.000Z</published>
    <updated>2020-10-21T07:41:32.739Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021151526.png" style="zoom:150%;"></p><a id="more"></a><h3 id="galera集群"><a href="#galera集群" class="headerlink" title="galera集群"></a>galera集群</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><p>galera集群至少需要三个节点的服务器硬件，以下操作在三个节点执行。安装后，在任意一个节点执行SQL，都是同步的。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>添加RPM源 vi etc/yum.repos.d/galera.repo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[galera]</span><br><span class="line">name = Galera</span><br><span class="line">baseurl = https://releases.galeracluster.com/galera-3/DIST/RELEASE/ARCH gpgkey = https://releases.galeracluster.com/GPG-KEY-galeracluster.com gpgcheck = 1</span><br><span class="line"></span><br><span class="line">[mysql-wsrep]</span><br><span class="line">name = MySQL-wsrep</span><br><span class="line">baseurl=https://releases.galeracluster.com/mysql-wsrep-VERSION/DIST/RELEASE/ARCH </span><br><span class="line">gpgkey = https://releases.galeracluster.com/GPG-KEY-galeracluster.com</span><br><span class="line">gpgcheck = 1</span><br></pre></td></tr></table></figure></li><li><p>yum 安装</p><p><code>yum install galera-3 mysql-wsrep-5.7 rsync</code></p></li><li><p>配置开机自启动</p><p><code>systemctl enable mysqld</code></p></li><li><p>启动mysql</p><p><code>systemctl start mysqld</code></p></li><li><p>登录MySql命令行，修改密码</p><blockquote><p>如果版本为5.7，系统为root设置了随机密码，需要修改配置文件 /etc/my.cnf,在最后添加如下配置，并重启mysql服务</p><p><code>skip-grant-tables=1 #跳过密码验证，等密码设置成功后，再将此配置删除掉</code></p></blockquote></li><li><p>登录mysql</p><p><code>mysql -uroot -p</code></p></li><li><p>修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user set authentication_string=password(&apos;001!&apos;) where user=&apos;root&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>设置远程访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;001!&apos; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><p>如果执行出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ERROR 3009 (HY000): Column count of mysql.user is wrong. Expected 45, found 43. Created with MySQL 50649, now running 50730. Please use mysql_upgrade to fix this error.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>原因：用户在创建时选择的是MySQL5.7的版本，而导入的备份文件为MySQL5.6的，版本不一致导致MySQL系统表有差异所之后。执行如下命令解决:mysql_upgrade -uroot -p</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021154120.png" alt></p></blockquote></li><li><p>服务器关闭selinux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config</span><br></pre></td></tr></table></figure></li><li><p>服务器关闭防火墙或者添加端口允许</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3306  MySQL client connections and mysqldump SST</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4567  Galera Cluster replication traffic</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4567/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4568  IST</span></span><br><span class="line">firewall-cmd --zone=public --add-port=4568/tcp --permanent</span><br></pre></td></tr></table></figure></li></ol><h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><ol><li><p>修改 /etc/my.cnf 文件，添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!includedir /etc/my.cnf.d/</span><br></pre></td></tr></table></figure></li><li><p>增加配置文件 /etc/my.cnf.d/galera.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">binlog_format=ROW #binlog文件格式：行</span><br><span class="line">default-storage-engine=innodb</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Provider Configuration</span></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera-3/libgalera_smm.so</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Cluster Configuration</span></span><br><span class="line">wsrep_cluster_name="fucloud_cluster"</span><br><span class="line">wsrep_cluster_address="gcomm://192.168.56.108,192.168.56.109,192.168.56.110"  #整个集群的IP地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Synchronization Configuration</span></span><br><span class="line">wsrep_sst_method=rsync  #拷贝模式xtrabackup-v2 或者 rsync</span><br><span class="line"><span class="meta">#</span><span class="bash">wsrep_sst_method=xtrabackup-v2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Galera Node Configuration 节点配置，每个节点只是这部分不同</span></span><br><span class="line">wsrep_node_address="192.168.56.110" #本节点ip地址</span><br><span class="line">wsrep_node_name="mysql3" #本节点名称</span><br></pre></td></tr></table></figure></li></ol><h4 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h4><ol><li><p>随机选择一个节点，使用专用脚本 mysqld_bootstrap 初始化集群</p><p><code>mysqld_bootstrap</code></p></li><li><p>在其他节点上启动 mysqld 服务</p><p><code>systemctl start mysqld</code></p></li></ol><h4 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h4><ol><li><p>确认集群启动成功（返回当前的集群节点数量）</p><p><code>mysql&gt; show status like &#39;wsrep_cluster_size&#39;;</code></p></li><li><p>查看galera状态 </p><p><code>mysql&gt; show status like &#39;wsrep%&#39;;</code></p></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/weijie0717/p/8445167.html" target="_blank" rel="noopener">https://www.cnblogs.com/weijie0717/p/8445167.html</a></p><p><a href="https://my.oschina.net/colben/blog/1831527" target="_blank" rel="noopener">https://my.oschina.net/colben/blog/1831527</a></p><p><a href="https://blog.51cto.com/14089205/2477697" target="_blank" rel="noopener">https://blog.51cto.com/14089205/2477697</a></p><p><a href="https://galeracluster.com/" target="_blank" rel="noopener">https://galeracluster.com/</a></p><h3 id="双主mysql-keepalived集群"><a href="#双主mysql-keepalived集群" class="headerlink" title="双主mysql+keepalived集群"></a>双主mysql+keepalived集群</h3><p>两台mysql互为主备，使用keepalived监控mysql状态，进行自动failover。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><p>mysql安装参考以上。</p><h5 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h5><ol><li><p>创建依赖环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum -y install openssl-devel gcc gcc-c++</span><br><span class="line">[root@localhost mkdir /etc/keepalived</span><br><span class="line">[root@localhost wget https://www.keepalived.org/software/keepalived-2.0.18.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>安装keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> tar -zxvf keepalived-2.0.18.tar.gz</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> mv keepalived-2.0.18 /usr/<span class="built_in">local</span>/keepalived</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/keepalived</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> ./configure &amp;&amp; make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></li><li><p>创建启动文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> cp -a /usr/<span class="built_in">local</span>/etc/keepalived   /etc/init.d/</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> cp -a /usr/<span class="built_in">local</span>/etc/sysconfig /keepalived/etc/sysconfig/</span></span><br><span class="line"><span class="meta">[root@localhost]#</span><span class="bash"> cp -a /usr/<span class="built_in">local</span>/sbin/keepalived  /usr/sbin/</span></span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><p><code>[root@localhost yum.repos.d]# systemctl enable keepalived</code></p></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="mysql主备配置"><a href="#mysql主备配置" class="headerlink" title="mysql主备配置"></a>mysql主备配置</h5><ol><li><p>配置服务器mysql1，修改/etc/my.cnf文件，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1             #id唯一</span><br><span class="line">log-bin=mysql-bin       #开启binlog日志功能</span><br><span class="line">auto-increment-increment=2</span><br><span class="line">auto-increment-offset=1</span><br><span class="line">log-slave-updates</span><br></pre></td></tr></table></figure></li><li><p>配置服务器mysql2，修改/etc/my.cnf文件，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2</span><br><span class="line">log-bin=mysql-bin       #开启binlog日志功能 </span><br><span class="line">auto-increment-increment=2</span><br><span class="line">auto-increment-offset=2</span><br><span class="line">log-slave-updates</span><br></pre></td></tr></table></figure></li><li><p>重启两台服务器的mysql服务</p><p><code>systemctl restart mysqld</code></p></li><li><p>在mysql1服务器上建立账户并授权</p><p><code>grant replication slave on *.* to &#39;itscmpsync&#39;@&#39;%&#39; identified by &#39;dcits001!&#39;;</code></p><blockquote><p>注：一般不用root帐号，“%”表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.56.109(mysql2服务器的ip地址)，加强安全</p></blockquote></li><li><p>登录mysql1服务器的mysql，查询master的状态</p><p><code>mysql&gt; show master status;</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140558.png" alt></p><blockquote><p>注：执行完此步骤后不要再操作master1服务器MYSQL，防止主服务器状态值变化</p></blockquote></li><li><p>配置mysql2服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">change master to master_host=<span class="string">'101.200.56.108'</span>,master_user=<span class="string">'itscmpsync'</span>,master_password=<span class="string">'dcits001!'</span>,master_log_file=<span class="string">'mysql-bin.000008'</span>,master_log_pos=154;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：master_log_file和master_log_pos的值应与mysql1服务器状态列出的值对应</p></blockquote></li><li><p>启动mysql2服务器复制功能</p><p><code>mysql&gt;start slave;</code></p></li><li><p>检查mysql2服务器复制功能状态</p><p><code>mysql&gt;show slave status\G</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140620.png" alt></p><blockquote><p>Slave_IO_Running: Yes //此状态必须YES </p><p>Slave_SQL_Running: Yes //此状态必须YES</p></blockquote></li><li><p>同样的操作，设置mysql1为mysql2的从服务器，在mysql2服务器上建立账户并授权</p><p><code>mysql&gt;grant replication slave on *.* to &#39;itscmpsync&#39;@&#39;%&#39; identified by &#39;dcits001!&#39;;</code></p><blockquote><p>注：一般不用root帐号，“%”表示所有客户端都可能连，只要帐号，密码正确，此处可用具体客户端IP代替，如192.168.56.108(mysql1服务器的ip地址)，加强安全</p></blockquote></li><li><p>登录mysql2服务器的mysql，查询master的状态</p><p><code>mysql&gt;show master status;</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140642.png" alt></p><blockquote><p>注：执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p></blockquote></li><li><p>配置mysql1服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">change master to master_host=<span class="string">'192.168.56.109'</span>,master_user=<span class="string">'itscmpsync'</span>,master_password=<span class="string">'dcits001!'</span>,master_log_file=<span class="string">'mysql-bin.000010'</span>,master_log_pos=154;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：master_log_file和master_log_pos的值应与mysql2服务器状态列出的值对应</p></blockquote></li><li><p>启动mysql1服务器复制功能</p><p><code>mysql&gt;show slave status\G</code></p></li><li><p>检查mysql1服务器复制功能状态</p><p><code>mysql&gt;show slave status\G</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20201021140659.png" alt></p></li></ol><h5 id="keepalived配置"><a href="#keepalived配置" class="headerlink" title="keepalived配置"></a>keepalived配置</h5><ol><li><p>编辑mysql1服务器keepalived配置文件，/etc/keepalived/keepalived.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">  router_id mysql-1  #运行keepalived服务器标识</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">   state BACKUP       #指定keepalived的角色，两台配置此处均是BACKUP，设为BACKUP将根据优先级决定主或从</span><br><span class="line">   interface enp0s8#指定检测网络的接口</span><br><span class="line"><span class="meta">   #</span><span class="bash">虚拟路由标示，这个标示是一个数字(取值在0-255之间，用来区分多个instance的VRRP组播)，同一个vrrp实例使用唯一的标示，确保和mysql2相同，同网内不同集群此项必须不同，否则发生冲突</span></span><br><span class="line">   virtual_router_id 51   </span><br><span class="line">   priority 100#用来选举master,该项取值范围是1-255（在此范围之外会被识别成默认值100），数值大的为master</span><br><span class="line">   advert_int 1        #发vrrp包的时间间隔，即多久进行一次master选举（可以认为是健康检测时间间隔）</span><br><span class="line"><span class="meta">   #</span><span class="bash">不抢占，允许优先级较低的作为master，即使有priority更高的节点启动，一般只在优先级高的mysql配置</span></span><br><span class="line">   Nopreempt </span><br><span class="line">   authentication &#123;  #认证区域，认证类型有PASS和HA(IPSEC),推荐使用PASS(密码只识别前8位)</span><br><span class="line">       auth_type PASS</span><br><span class="line">       auth_pass 1111</span><br><span class="line">   &#125;</span><br><span class="line">   virtual_ipaddress &#123;    #VIP区域，指定vip地址</span><br><span class="line">       192.168.56.150     #虚拟vip</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置虚拟服务器，需要指定虚拟IP地址和服务端口，IP与端口之间用空格隔开</span></span><br><span class="line">virtual_server 192.168.56.150 3306 &#123; </span><br><span class="line">   delay_loop 2   #每隔2秒检查一次real_server状态</span><br><span class="line">   lb_algo rr #设置后端调度算法，这里设置为rr,即轮询算法</span><br><span class="line">   lb_kind DR     #设置LVS实现负载均衡的机制，有NAT、TUN、DR三个模式可选</span><br><span class="line"><span class="meta">   #</span><span class="bash">会话保持时间，单位为秒。这个选项对动态网页非常有用，为集群系统中的session共享提供了一个很好的解决方案，有了这个会话保持功能，用户的请求会被一只分发到某个服务节点，直到超过这个会话的保持时间</span></span><br><span class="line">   persistence_timeout 60 </span><br><span class="line">   protocol TCP    #指定转发协议类型，有TCP和UDP两种</span><br><span class="line">   real_server 192.168.56.108 3306 &#123; #配置服务节点1，需要指定real server的真实IP地址和端口</span><br><span class="line">       weight 3  #配置服务的权重</span><br><span class="line">       notify_down /etc/keepalived/bin/mysql.sh  #检测到服务down后执行的脚本</span><br><span class="line">       TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3         #连接超时时间 </span><br><span class="line">            nb_get_retry 3            #重连次数</span><br><span class="line">            delay_before_retry 3      #重连间隔时间</span><br><span class="line">            connect_port 3306      #健康检查端口 </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编辑mysql2服务器keepalived配置文件，/etc/keepalived/keepalived.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">  router_id mysql-2         #服务器标识</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">   state BACKUP</span><br><span class="line">   interface enp0s8</span><br><span class="line">   virtual_router_id 51</span><br><span class="line">   priority 50               #优先级，用来选举</span><br><span class="line">   advert_int 1</span><br><span class="line">   authentication &#123;</span><br><span class="line">       auth_type PASS</span><br><span class="line">       auth_pass 1111</span><br><span class="line">   &#125;</span><br><span class="line">   virtual_ipaddress &#123;</span><br><span class="line">       192.168.56.150</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.56.150 3306 &#123;</span><br><span class="line">   delay_loop 2</span><br><span class="line">   lb_algo rr</span><br><span class="line">   lb_kind DR</span><br><span class="line">   persistence_timeout 60</span><br><span class="line">   protocol TCP</span><br><span class="line">   real_server 192.168.56.109 3306 &#123; </span><br><span class="line">       weight 3</span><br><span class="line">       notify_down    /etc/keepalived/bin/mysql.sh</span><br><span class="line">       TCP_CHECK &#123;</span><br><span class="line">            connect_timeout 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">            connect_port 3306</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>分别在mysql1和mysql2上创建服务down后脚本 /etc/keepalived/bin/mysql.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">pkill keepalived</span><br><span class="line">sleep  10</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure></li><li><p>配置运行权限</p><p><code>chmod +x mysql.sh</code></p></li><li><p>启动keepalived</p><p><code>systemctl start keepalived</code></p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>采用keepalived作为高可用方案时，两个节点最好都设置成BACKUP模式，避免因为意外情况下（比如脑裂）相互抢占导致往两个节点写入相同数据而引发冲突；</li><li>把两个节点的auto_increment_increment（自增步长）和auto_increment_offset（自增起始值）设成不同值。其目的是为了避免master节点意外宕机时，可能会有部分binlog未能及时复制到slave上被应用，从而会导致slave新写入数据的自增值和原先master上冲突了，因此一开始就使其错开；当然了，如果有合适的容错机制能解决主从自增ID冲突的话，也可以不这么做；</li><li>.slave节点服务器配置不要太差，否则更容易导致复制延迟。作为热备节点的slave服务器，硬件配置不能低于master节点；</li><li>如果对延迟问题很敏感的话，可考虑使用<a href="https://cloud.tencent.com/product/tdsql?from=10680" target="_blank" rel="noopener">MariaDB</a>分支版本，或者直接上线MySQL 5.7最新版本，利用多线程复制的方式可以很大程度降低复制延迟；</li></ol><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><p><a href="https://cloud.tencent.com/developer/article/1139739" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1139739</a></p><p><a href="https://cloud.tencent.com/developer/article/1343127" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1343127</a></p><p><a href="https://cloud.tencent.com/developer/article/1343127" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1343127</a></p><p><a href="https://www.cnblogs.com/gered/p/11221702.html" target="_blank" rel="noopener">https://www.cnblogs.com/gered/p/11221702.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20201021151526.png&quot; style=&quot;zoom:150%;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="https://haominglfs.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://haominglfs.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>echart+百度地图</title>
    <link href="https://haominglfs.github.io/2020/08/23/echart-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    <id>https://haominglfs.github.io/2020/08/23/echart-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/</id>
    <published>2020-08-23T07:26:38.000Z</published>
    <updated>2020-08-23T08:26:00.430Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200823162355.png" alt></p><a id="more"></a><p>最近使用echart在地图上绘制散点图，总结一下，防止以后忘记。</p><p><strong>注意</strong>：使用了django框架，如果使用其他技术，需要修改路径。</p><h3 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h3><h4 id="echart"><a href="#echart" class="headerlink" title="echart"></a>echart</h4><p><code>&lt;script src=&quot;js/echarts.js&quot;&gt;&lt;/script&gt;</code></p><h4 id="百度地图扩展"><a href="#百度地图扩展" class="headerlink" title="百度地图扩展"></a>百度地图扩展</h4><p><code>&lt;script src=&quot;js/bmap.js&quot;&gt;&lt;/script&gt;</code></p><p><a href="https://github.com/apache/incubator-echarts/tree/master/extension/bmap" target="_blank" rel="noopener">源码地址、使用文档</a></p><h4 id="百度地图api"><a href="#百度地图api" class="headerlink" title="百度地图api"></a>百度地图api</h4><p><code>&lt;script src=&quot;http://api.map.baidu.com/api?v=2.0&amp;ak=#{在百度地图开放平台申请的ak}&quot;&gt;&lt;/script&gt;</code></p><p><a href="https://lbsyun.baidu.com/" target="_blank" rel="noopener">开放平台地址</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><h4 id="ECharts-将百度地图部分配置集成在了-bmap-中，包括："><a href="#ECharts-将百度地图部分配置集成在了-bmap-中，包括：" class="headerlink" title="ECharts 将百度地图部分配置集成在了 bmap 中，包括："></a>ECharts 将百度地图部分配置集成在了 bmap 中，包括：</h4><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th><th><strong>格式</strong></th></tr></thead><tbody><tr><td>center</td><td>中心点的百度坐标</td><td>坐标数组, 如：[116.307698, 40.056975]</td></tr><tr><td>zoom</td><td>初始缩放比</td><td>number</td></tr><tr><td>roam</td><td>是否允许用户缩放操作</td><td>boolean</td></tr><tr><td>mapStyle</td><td>地图自定义样式</td><td>object, 如：{ styleJson: […] }</td></tr></tbody></table><h4 id="自定义百度地图样式"><a href="#自定义百度地图样式" class="headerlink" title="自定义百度地图样式"></a>自定义百度地图样式</h4><p>地图的样式配置 <code>bmap.mapStyle</code> 中 <code>styleJson</code> 与百度地图内置的样式配置一致，具体参考百度地图API开发指南中 <a href="http://lbsyun.baidu.com/index.php?title=jspopular/guide/custom" target="_blank" rel="noopener">定制个性地图</a>章节的介绍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">bmap: &#123;</span><br><span class="line">      center: [<span class="number">116.307698</span>, <span class="number">40.056975</span>],</span><br><span class="line">         zoom: <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">         roam: <span class="literal">true</span>, <span class="comment">// 允许缩放</span></span><br><span class="line"></span><br><span class="line">         mapStyle: &#123;  <span class="comment">// 百度地图自定义样式</span></span><br><span class="line">         styleJson: [</span><br><span class="line">         <span class="comment">// 陆地</span></span><br><span class="line">                 &#123;</span><br><span class="line"><span class="string">"featureType"</span>: <span class="string">"land"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#073763"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 水系</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"water"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#073763"</span>,</span><br><span class="line">                              <span class="string">"lightness"</span>: <span class="number">-54</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 国道与高速</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#45818e"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 边界线</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"boundary"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">                              <span class="string">"lightness"</span>: <span class="number">-62</span>,</span><br><span class="line">                              <span class="string">"visibility"</span>: <span class="string">"on"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      <span class="comment">// 行政标注</span></span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"label"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"labels.text.fill"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">                              <span class="string">"visibility"</span>: <span class="string">"on"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="string">"featureType"</span>: <span class="string">"label"</span>,</span><br><span class="line">                          <span class="string">"elementType"</span>: <span class="string">"labels.text.stroke"</span>,</span><br><span class="line">                          <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                              <span class="string">"color"</span>: <span class="string">"#444444"</span>,</span><br><span class="line">                              <span class="string">"visibility"</span>: <span class="string">"on"</span></span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">         ]</span><br><span class="line">         &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="百度地图api-1"><a href="#百度地图api-1" class="headerlink" title="百度地图api"></a>百度地图api</h4><p>除了上述四个配置，其他地图设置都可以通过 <a href="http://lbsyun.baidu.com/index.php?title=jspopular" target="_blank" rel="noopener">百度地图提供的API</a> 实现</p><h5 id="获取百度地图实例："><a href="#获取百度地图实例：" class="headerlink" title="获取百度地图实例："></a>获取百度地图实例：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bmap = bmapCharts.getModel().getComponent(<span class="string">'bmap'</span>).getBMap(); <span class="comment">// 百度地图实例</span></span><br><span class="line">bmap.addControl(<span class="keyword">new</span> BMap.NavigationControl()); <span class="comment">// 缩放控件</span></span><br><span class="line">bmap.addControl(<span class="keyword">new</span> BMap.ScaleControl()); <span class="comment">// 比例尺</span></span><br></pre></td></tr></table></figure><p>var bmap = bmapCharts.getModel().getComponent(‘bmap’).getBMap(); // 百度地图实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&#123;% load <span class="keyword">static</span> %&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"echarts-records"</span> style=<span class="string">"width: 1000px;height:500px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--引入百度地图的jssdk，这里需要使用你在百度地图开发者平台申请的 ak--&gt;</span><br><span class="line">&lt;script src=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=#&#123;在百度地图开放平台申请的ak&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"&#123;% static 'js/echarts.js'%&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 引入百度地图扩展 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"&#123;% static 'js/bmap.js'%&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> echartsRecords = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'echarts-records'</span>), <span class="string">'walden'</span>);</span><br><span class="line">        <span class="keyword">var</span> data = [];</span><br><span class="line">        <span class="keyword">var</span> geoCoordMap = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> convertData = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> res = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> geoCoord = geoCoordMap[data[i].name];</span><br><span class="line">                <span class="keyword">if</span> (geoCoord) &#123;</span><br><span class="line">                    res.push(&#123;</span><br><span class="line">                        name: data[i].name,</span><br><span class="line">                        value: geoCoord.concat(data[i].value[<span class="number">0</span>].value)</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        option = &#123;</span><br><span class="line">            backgroundColor: <span class="string">'transparent'</span>,</span><br><span class="line">            title: &#123;</span><br><span class="line">                text: <span class="string">'数据统计'</span>,</span><br><span class="line">                left: <span class="string">'center'</span>,</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                    color: <span class="string">'#fff'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip : &#123;</span><br><span class="line">                trigger: <span class="string">'item'</span>,</span><br><span class="line">                formatter: <span class="function"><span class="keyword">function</span>(<span class="params">params, ticket, callback</span>)</span>&#123;<span class="comment">//定制提示信息</span></span><br><span class="line">                    <span class="keyword">var</span> toolTiphtml = <span class="string">''</span></span><br><span class="line">                    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(params.data.value[<span class="number">0</span>],params.data.value[<span class="number">1</span>]);</span><br><span class="line">                    gc.getLocation(point, <span class="function"><span class="keyword">function</span> (<span class="params">rs</span>) </span>&#123;<span class="comment">//根据经纬度获取地址信息</span></span><br><span class="line">                        <span class="keyword">var</span> address = rs.address;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(params.name==data[i].name)&#123;</span><br><span class="line">                                toolTiphtml += address+<span class="string">':&lt;br&gt;'</span></span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;data[i].value.length;j++)&#123;</span><br><span class="line">                                    toolTiphtml+=data[i].value[j].name+<span class="string">': '</span>+data[i].value[j].value+<span class="string">"&lt;br&gt;"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                                callback(ticket, toolTiphtml);<span class="comment">//异步回掉获取提示信息</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'loading'</span>;<span class="comment">//内容还没返回时显示的内容</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            bmap: &#123;</span><br><span class="line">                center: [<span class="number">104.114129</span>, <span class="number">37.550339</span>],</span><br><span class="line">                <span class="comment">//mapType: 'china',</span></span><br><span class="line">                zoom: <span class="number">5</span>,<span class="comment">// 百度地图缩放等级，数字越大，放大越大，地图比例尺越小</span></span><br><span class="line">                roam: <span class="string">'move'</span>, <span class="comment">// 是否开启拖拽缩放，可以只设置 'scale' 或者 'move' true</span></span><br><span class="line">                mapStyle: &#123;<span class="comment">//地图样式，参考https://developer.baidu.com/map/custom/</span></span><br><span class="line">                    styleJson: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"water"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#044161"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"land"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#004981"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"boundary"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#064f85"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"railway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#004981"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry.fill"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#005b96"</span>,</span><br><span class="line">                                <span class="string">"lightness"</span>: <span class="number">1</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"highway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"labels"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"arterial"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#004981"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"arterial"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry.fill"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#00508b"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"poi"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"green"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#056197"</span>,</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"subway"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"manmade"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"local"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"arterial"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"labels"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"boundary"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"geometry.fill"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#029fd4"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"building"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"color"</span>: <span class="string">"#1a5787"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="string">"featureType"</span>: <span class="string">"label"</span>,</span><br><span class="line">                            <span class="string">"elementType"</span>: <span class="string">"all"</span>,</span><br><span class="line">                            <span class="string">"stylers"</span>: &#123;</span><br><span class="line">                                <span class="string">"visibility"</span>: <span class="string">"off"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            series : [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">'Net capacity'</span>,</span><br><span class="line">                    <span class="comment">//type: 'scatter',</span></span><br><span class="line">                    type: <span class="string">'effectScatter'</span>,</span><br><span class="line">                    coordinateSystem: <span class="string">'bmap'</span>,</span><br><span class="line">                    data: convertData(data),</span><br><span class="line">                    encode: &#123;</span><br><span class="line">                        value: <span class="number">2</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    symbolSize: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> val[<span class="number">2</span>] / <span class="number">700</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    label: &#123;</span><br><span class="line">                        formatter: <span class="string">'&#123;b&#125;'</span>,</span><br><span class="line">                        position: <span class="string">'right'</span>,</span><br><span class="line">                        fontSize :<span class="number">20</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    itemStyle: &#123;</span><br><span class="line">                        color: <span class="string">'#ddb926'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    emphasis: &#123;</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            show: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">'custom'</span>,</span><br><span class="line">                    coordinateSystem: <span class="string">'bmap'</span>,</span><br><span class="line">                    renderItem: renderItem,</span><br><span class="line">                    itemStyle: &#123;</span><br><span class="line">                        opacity: <span class="number">0.5</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    animation: <span class="literal">false</span>,</span><br><span class="line">                    silent: <span class="literal">true</span>,</span><br><span class="line">                    data: [<span class="number">0</span>],</span><br><span class="line">                    z: <span class="number">-10</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        echartsRecords.setOption(option);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取百度地图实例</span></span><br><span class="line">        <span class="keyword">var</span> bmap = echartsRecords.getModel().getComponent(<span class="string">'bmap'</span>).getBMap();</span><br><span class="line">        <span class="comment">//使用百度地图自带的控件</span></span><br><span class="line">        <span class="comment">//bmap.addControl(new BMap.MapTypeControl());</span></span><br><span class="line">        <span class="keyword">var</span> top_left_control = <span class="keyword">new</span> BMap.ScaleControl(&#123;<span class="attr">anchor</span>: BMAP_ANCHOR_TOP_LEFT&#125;);<span class="comment">// 左上角，添加比例尺</span></span><br><span class="line">    <span class="keyword">var</span> top_left_navigation = <span class="keyword">new</span> BMap.NavigationControl();  <span class="comment">//左上角，添加默认缩放平移控件</span></span><br><span class="line">        bmap.addControl(top_left_control)</span><br><span class="line">        bmap.addControl(top_left_navigation)</span><br><span class="line">        <span class="keyword">var</span> gc = <span class="keyword">new</span> BMap.Geocoder();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// echarts 窗口缩放自适应</span></span><br><span class="line">        <span class="comment">//用于使chart自适应高度和宽度,通过窗体高宽计算容器高宽</span></span><br><span class="line">        <span class="keyword">var</span> resizeEchartContainer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            width = $(<span class="string">"#echart_card"</span>).width();</span><br><span class="line">            height = $(<span class="string">"#echart_card"</span>).height();</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'echarts-records'</span>).style.width = width+<span class="string">'px'</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">'echarts-records'</span>).style.height = height+<span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resizeEchartContainer(); </span><br><span class="line">            echartsRecords.resize();</span><br><span class="line">        &#125;</span><br><span class="line">        resizeEchartContainer();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="echart底图加载方式"><a href="#echart底图加载方式" class="headerlink" title="echart底图加载方式"></a>echart底图加载方式</h3><p>以上使用的为第一种</p><p><a href="https://www.cnblogs.com/hao-1234-1234/p/9292996.html" target="_blank" rel="noopener">底图加载方式</a></p><p><a href="http://datav.aliyun.com/tools/atlas/#&amp;lat=8.407168163601076&amp;lng=135&amp;zoom=2" target="_blank" rel="noopener">获取坐标json数据</a></p><h3 id="根据经纬度获取详细地址"><a href="#根据经纬度获取详细地址" class="headerlink" title="根据经纬度获取详细地址"></a>根据经纬度获取详细地址</h3><h4 id="地址解析服务"><a href="#地址解析服务" class="headerlink" title="地址解析服务"></a>地址解析服务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"l-map"</span>);      </span><br><span class="line">map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">11</span>);      </span><br><span class="line"><span class="comment">// 创建地址解析器实例     </span></span><br><span class="line"><span class="keyword">var</span> myGeo = <span class="keyword">new</span> BMap.Geocoder();      </span><br><span class="line"><span class="comment">// 将地址解析结果显示在地图上，并调整地图视野    </span></span><br><span class="line">myGeo.getPoint(<span class="string">"北京市海淀区上地10街10号"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">point</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">if</span> (point) &#123;      </span><br><span class="line">        map.centerAndZoom(point, <span class="number">16</span>);      </span><br><span class="line">        map.addOverlay(<span class="keyword">new</span> BMap.Marker(point));      </span><br><span class="line">    &#125;      </span><br><span class="line"> &#125;, </span><br><span class="line"><span class="string">"北京市"</span>);</span><br></pre></td></tr></table></figure><h4 id="逆地址解析服务"><a href="#逆地址解析服务" class="headerlink" title="逆地址解析服务"></a>逆地址解析服务</h4><h5 id="指定经纬度获取地址"><a href="#指定经纬度获取地址" class="headerlink" title="指定经纬度获取地址"></a>指定经纬度获取地址</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"l-map"</span>);      </span><br><span class="line">map.centerAndZoom(<span class="keyword">new</span> BMap.Point(<span class="number">116.404</span>, <span class="number">39.915</span>), <span class="number">11</span>);      </span><br><span class="line"><span class="comment">// 创建地理编码实例, 并配置参数获取乡镇级数据</span></span><br><span class="line"><span class="keyword">var</span> myGeo = <span class="keyword">new</span> BMap.Geocoder(&#123;<span class="attr">extensions_town</span>: <span class="literal">true</span>&#125;);      </span><br><span class="line"><span class="comment">// 根据坐标得到地址描述    </span></span><br><span class="line">myGeo.getLocation(<span class="keyword">new</span> BMap.Point(<span class="number">116.364</span>, <span class="number">39.993</span>), <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">if</span> (result)&#123;      </span><br><span class="line">    alert(result.address);      </span><br><span class="line">    &#125;      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="鼠标点击地图获取地址"><a href="#鼠标点击地图获取地址" class="headerlink" title="鼠标点击地图获取地址"></a>鼠标点击地图获取地址</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"allmap"</span>);</span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(<span class="number">116.331398</span>,<span class="number">39.897445</span>);</span><br><span class="line">map.centerAndZoom(point,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">var</span> geoc = <span class="keyword">new</span> BMap.Geocoder();    </span><br><span class="line">map.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;        </span><br><span class="line">    <span class="keyword">var</span> pt = e.point;</span><br><span class="line">    geoc.getLocation(pt, <span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> addComp = rs.addressComponents;</span><br><span class="line">        alert(addComp.province + <span class="string">", "</span> + addComp.city + <span class="string">", "</span> + addComp.district + <span class="string">", "</span> + addComp.street + <span class="string">", "</span> + addComp.streetNumber);</span><br><span class="line">    &#125;);        </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://lbsyun.baidu.com/index.php?title=jspopular3.0/guide/geocoding" target="_blank" rel="noopener">官方文档</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/hao-1234-1234/p/10954979.html" target="_blank" rel="noopener">https://www.cnblogs.com/hao-1234-1234/p/10954979.html</a></p><p><a href="https://blog.csdn.net/qq_35736779/article/details/99772172" target="_blank" rel="noopener">https://blog.csdn.net/qq_35736779/article/details/99772172</a></p><p><a href="https://juejin.im/post/6844904160945504269" target="_blank" rel="noopener">https://juejin.im/post/6844904160945504269</a></p><p>### </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200823162355.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="echart" scheme="https://haominglfs.github.io/categories/echart/"/>
    
    
      <category term="-echart -百度地图" scheme="https://haominglfs.github.io/tags/echart-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli4快速搭建项目详解</title>
    <link href="https://haominglfs.github.io/2020/07/28/vue-cli4%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://haominglfs.github.io/2020/07/28/vue-cli4%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-07-28T13:57:04.000Z</published>
    <updated>2020-07-28T15:18:24.547Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728230318.png" alt></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="卸载旧版本-并安装vue-cli4"><a href="#卸载旧版本-并安装vue-cli4" class="headerlink" title="卸载旧版本,并安装vue-cli4"></a>卸载旧版本,并安装vue-cli4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g</span><br><span class="line">npm install -g @vue/cli    <span class="comment">//vue-cli2.x的安装命令是 cnpm install -g vue-cli</span></span><br><span class="line">vue -V <span class="comment">//校验是否安装成功</span></span><br></pre></td></tr></table></figure><p>如图，表示安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728221009.png" alt></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><code>vue create 项目名</code></p><h3 id="选择配置"><a href="#选择配置" class="headerlink" title="选择配置"></a>选择配置</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728221327.png" alt></p><blockquote><p><strong>default</strong>：默认配置（只有babel和eslint）<br><strong>Manually select features</strong>：手动配置<br>一般做项目默认配置是不够的，我们选第二项。</p></blockquote><h3 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728221729.png" alt></p><table><thead><tr><th style="text-align:center"><strong>选项</strong></th><th style="text-align:center"><strong>解释</strong></th></tr></thead><tbody><tr><td style="text-align:center">Babel</td><td style="text-align:center">一种能让浏览器自动识别向后兼容各版本JavaScript的功能（选）</td></tr><tr><td style="text-align:center">TypeScript</td><td style="text-align:center">一种.ts后缀兼容js的语法（不选）</td></tr><tr><td style="text-align:center">Progressive Web App（PWA）Support</td><td style="text-align:center">渐进式网络应用（不选）</td></tr><tr><td style="text-align:center">Router</td><td style="text-align:center">vue的路由管理组件（选）</td></tr><tr><td style="text-align:center">Vuex</td><td style="text-align:center">vue的状态仓库管理组件（选）</td></tr><tr><td style="text-align:center">CSS Pre-processors</td><td style="text-align:center">CSS预编译（选）</td></tr><tr><td style="text-align:center">Linter/Formatter</td><td style="text-align:center">代码检验 格式检查（选）</td></tr><tr><td style="text-align:center">Unit Testing</td><td style="text-align:center">单元测试 以开发角度测试代码（不选）</td></tr><tr><td style="text-align:center">E2E Testing</td><td style="text-align:center">e2e测试 以用户角度测试代码（不选）</td></tr></tbody></table><h3 id="选择router模式"><a href="#选择router模式" class="headerlink" title="选择router模式"></a><strong>选择router模式</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728222352.png" alt></p><blockquote><p>history和hash是router组件的mode选项，一般默认用history更普遍和实用。</p><p>具体可以参考：<a href="https://segmentfault.com/q/1010000010340823" target="_blank" rel="noopener">https://segmentfault.com/q/1010000010340823</a></p></blockquote><h3 id="选择CSS预编译方式"><a href="#选择CSS预编译方式" class="headerlink" title="选择CSS预编译方式"></a><strong>选择CSS预编译方式</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728223123.png" alt></p><blockquote><p>这里看你个人习惯，我经常用<code>Sass/Scss（with dart-sass）</code></p><p>node-sass和dart-sass区别：<a href="https://www.dart-china.org/t/topic/146" target="_blank" rel="noopener">https://www.dart-china.org/t/topic/146</a>      <a href="https://www.sasscss.com/" target="_blank" rel="noopener">https://www.sasscss.com/</a></p></blockquote><h3 id="选择代码校验方式"><a href="#选择代码校验方式" class="headerlink" title="选择代码校验方式"></a><strong>选择代码校验方式</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224248.png" alt></p><blockquote><p>我习惯选<code>ESLint with error prevention only</code>或者最后一项<code>ESLint+Prettier</code>。如果是用VScode的小伙伴推荐最后一项，与VScode里的Prettier插件配合不错。</p></blockquote><h3 id="选择代码检查时间点"><a href="#选择代码检查时间点" class="headerlink" title="选择代码检查时间点"></a><strong>选择代码检查时间点</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224450.png" alt></p><blockquote><p>选择第一项<code>Lint on save</code>，在保存后就自动检验代码和格式.</p></blockquote><h3 id="询问配置保存位置"><a href="#询问配置保存位置" class="headerlink" title="询问配置保存位置"></a><strong>询问配置保存位置</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224602.png" alt></p><blockquote><p>询问是否将配置放在package.json文件中。推荐选第一项<code>In dedicated config files</code>，创建新的配置文件。</p><p>如果是选择 独立文件放置，项目会有单独如下图所示的几件文件。</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728225456.png" alt></p></blockquote><h3 id="保存为预配置"><a href="#保存为预配置" class="headerlink" title="保存为预配置"></a><strong>保存为预配置</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728224919.png" alt></p><blockquote><p>询问是否将以上配置保存为<strong>预配置</strong>。这个根据自己意愿，预配置对以后创建项目来说还是方便点的，选择“Y”or“N”。如果“Y”，就继续设置预配置名称；如果“N”就自动跳过。</p></blockquote><h3 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728225117.png" alt></p><blockquote><p>回车开始自动创建项目，需要一定时间，创建成功结束后可以看到以下项目结构！</p><p><img src="/Users/haominglfs/Library/Application Support/typora-user-images/image-20200728225324969.png" alt="image-20200728225324969"></p></blockquote><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>控制台输入如下命令启动项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-project <span class="comment">// 进入到项目根目录</span></span><br><span class="line">npm run serve <span class="comment">// 启动项目</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200728225805.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200728230318.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haominglfs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://haominglfs.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot异常处理</title>
    <link href="https://haominglfs.github.io/2020/06/21/SpringBoot%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://haominglfs.github.io/2020/06/21/SpringBoot%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2020-06-21T10:06:45.000Z</published>
    <updated>2020-06-26T03:15:03.438Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626105320.jpg" alt="img"></p><a id="more"></a><ol><li><p>统一异常处理</p><p><a href="http://www.gxitsky.com/2019/01/30/springboot-app-38-global-exception-handle/" target="_blank" rel="noopener">http://www.gxitsky.com/2019/01/30/springboot-app-38-global-exception-handle/</a></p><p><a href="http://www.zhaojun.im/springboot-exception/" target="_blank" rel="noopener">http://www.zhaojun.im/springboot-exception/</a></p><p><a href="https://www.jianshu.com/p/9792846ee029" target="_blank" rel="noopener">https://www.jianshu.com/p/9792846ee029</a></p><p><a href="https://www.cnblogs.com/harrychinese/p/SpringBoot_exception_handler_best_practice.html" target="_blank" rel="noopener">https://www.cnblogs.com/harrychinese/p/SpringBoot_exception_handler_best_practice.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200626105320.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="exception" scheme="https://haominglfs.github.io/categories/exception/"/>
    
    
      <category term="springboot" scheme="https://haominglfs.github.io/tags/springboot/"/>
    
      <category term="exception" scheme="https://haominglfs.github.io/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity</title>
    <link href="https://haominglfs.github.io/2020/06/21/SpringSecurity/"/>
    <id>https://haominglfs.github.io/2020/06/21/SpringSecurity/</id>
    <published>2020-06-21T05:33:18.000Z</published>
    <updated>2020-06-26T03:15:01.954Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626110646.jpg" alt="img"></p><a id="more"></a><ol><li>解决SpringSecurity手动退出登录后再次登录成功会重定向到登录界面的问题(<a href="https://www.jianshu.com/p/4a5061951c77" target="_blank" rel="noopener">https://www.jianshu.com/p/4a5061951c77</a>)</li></ol><p><code>.and().logoutSuccessUrl(&quot;/&quot;)</code></p><ol start="2"><li><p>设置session超时退出(<a href="https://www.cnblogs.com/zyly/p/12316099.html" target="_blank" rel="noopener">https://www.cnblogs.com/zyly/p/12316099.html</a>)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.servlet.session.timeout</span>=<span class="string">1800</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//session管理,失效后跳转</span></span><br><span class="line">http.sessionManagement().invalidSessionUrl(<span class="string">"/login"</span>);</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot中SpringSecurity 中不能抛出异常UserNameNotFoundException 问题解析与处理</p><p><a href="https://juejin.im/post/5c432efce51d4551e653a77e" target="_blank" rel="noopener">https://juejin.im/post/5c432efce51d4551e653a77e</a></p><p><a href="https://www.jianshu.com/p/4a7654fa0bd3" target="_blank" rel="noopener">https://www.jianshu.com/p/4a7654fa0bd3</a></p><p><a href="https://blog.csdn.net/sun1021873926/article/details/60332059" target="_blank" rel="noopener">https://blog.csdn.net/sun1021873926/article/details/60332059</a></p><p><a href="https://www.jianshu.com/p/5714777114b1" target="_blank" rel="noopener">https://www.jianshu.com/p/5714777114b1</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DaoAuthenticationProvider <span class="title">authenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DaoAuthenticationProvider provider = <span class="keyword">new</span> DaoAuthenticationProvider();</span><br><span class="line">  provider.setHideUserNotFoundExceptions(<span class="keyword">false</span>);</span><br><span class="line">  provider.setUserDetailsService(mUserDetailsService);</span><br><span class="line">  provider.setPasswordEncoder(passwordEncoder);</span><br><span class="line">  <span class="keyword">return</span> provider;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加验证码</p><p><a href="https://www.jianshu.com/p/5a83e364869c" target="_blank" rel="noopener">https://www.jianshu.com/p/5a83e364869c</a></p></li><li><p>Spring Security整合thymeleaf</p><p><a href="https://www.jianshu.com/p/953c8998e2bd" target="_blank" rel="noopener">https://www.jianshu.com/p/953c8998e2bd</a></p></li><li><p>源码分析</p><p><a href="https://segmentfault.com/a/1190000018616620" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018616620</a></p><p><a href="https://blog.csdn.net/u012702547/article/details/89629415" target="_blank" rel="noopener">https://blog.csdn.net/u012702547/article/details/89629415</a></p><p><a href="https://www.cnblogs.com/crazymakercircle/p/12040402.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazymakercircle/p/12040402.html</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200626110646.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringSecurity" scheme="https://haominglfs.github.io/categories/SpringSecurity/"/>
    
    
      <category term="SpringSecurity" scheme="https://haominglfs.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>thymeleaf</title>
    <link href="https://haominglfs.github.io/2020/06/21/thymeleaf/"/>
    <id>https://haominglfs.github.io/2020/06/21/thymeleaf/</id>
    <published>2020-06-21T05:28:25.000Z</published>
    <updated>2020-06-26T03:18:03.605Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626111742.jpg" alt="img"></p><a id="more"></a><ol><li><p>判断对象是否为空</p><p>使用 ${xxx?.xxx?} 可以判断对象是否为空，? 号 前的对象或者属性为空那么就不再进行渲染，而且不会导致出现报错的情况</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200626111742.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="thymeleaf" scheme="https://haominglfs.github.io/categories/thymeleaf/"/>
    
    
      <category term="thymeleaf" scheme="https://haominglfs.github.io/tags/thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>idea热加载配置</title>
    <link href="https://haominglfs.github.io/2020/06/07/idea%E7%83%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE/"/>
    <id>https://haominglfs.github.io/2020/06/07/idea%E7%83%AD%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE/</id>
    <published>2020-06-07T06:15:43.000Z</published>
    <updated>2020-06-26T01:30:51.203Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607151649.png" alt></p><a id="more"></a><h3 id="热加载方式"><a href="#热加载方式" class="headerlink" title="热加载方式"></a>热加载方式</h3><ol><li>JRebel 收费，有点贵</li><li>Spring-Loader  不稳定</li><li>DCEVM+Hotswap Agent 免费（当然选择这种）</li></ol><h3 id="DCEVM-Hotswap-Agent"><a href="#DCEVM-Hotswap-Agent" class="headerlink" title="DCEVM+Hotswap Agent"></a>DCEVM+Hotswap Agent</h3><h4 id="下载DCEVM"><a href="#下载DCEVM" class="headerlink" title="下载DCEVM"></a>下载DCEVM</h4><p><a href="https://github.com/dcevm/dcevm/releases/download/light-jdk8u51%2B3/DCEVM-light-8u51-installer.jar" target="_blank" rel="noopener">latest release of DCEVM Java patch</a></p><p><code>sudo java -jar DCEVM-8u181-installer-build2.jar</code></p><p>选择jdk安装目录，并点击”Install DCEVM as altjvm”按钮</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607143035.png" alt></p><h4 id="下载Hotswap-agent-jar"><a href="#下载Hotswap-agent-jar" class="headerlink" title="下载Hotswap agent jar"></a>下载Hotswap agent jar</h4><p><a href="https://github.com/HotswapProjects/HotswapAgent/releases" target="_blank" rel="noopener">latest release of Hotswap agent jar</a></p><p>放到任意目录</p><h4 id="安装idea插件-HotSwapAgent"><a href="#安装idea插件-HotSwapAgent" class="headerlink" title="安装idea插件 HotSwapAgent"></a>安装idea插件 HotSwapAgent</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607143722.png" alt></p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607143942.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607144328.png" alt></p><h4 id="以debug模式启动应用程序"><a href="#以debug模式启动应用程序" class="headerlink" title="以debug模式启动应用程序"></a>以debug模式启动应用程序</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607164047.png" alt></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>修改代码或者添加新方法，点击编译</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200607145054.png" alt></p><h3 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h3><h3 id="DCEVM-amp-HotswapAgent"><a href="#DCEVM-amp-HotswapAgent" class="headerlink" title="DCEVM &amp; HotswapAgent"></a><a href="https://dcevm.github.io/" target="_blank" rel="noopener">DCEVM</a> &amp; <a href="http://www.hotswapagent.org/" target="_blank" rel="noopener">HotswapAgent</a></h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin" target="_blank" rel="noopener">https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200607151649.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="idea" scheme="https://haominglfs.github.io/categories/idea/"/>
    
    
      <category term="idea" scheme="https://haominglfs.github.io/tags/idea/"/>
    
      <category term="热加载" scheme="https://haominglfs.github.io/tags/%E7%83%AD%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>java8学习</title>
    <link href="https://haominglfs.github.io/2020/05/30/java8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://haominglfs.github.io/2020/05/30/java8%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-30T13:32:30.000Z</published>
    <updated>2020-06-26T03:16:02.707Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200626111451.jpg" alt="img"></p><a id="more"></a><h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><ol><li><p>函数式接口就是只定义一个抽象方法的接口</p></li><li><p>函数式接口的抽象方法的签名称为函数描述符。</p><ul><li>Predicate:java.util.function.Predicate<t>接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean。</t></li><li>Consumer:java.util.function.Consumer<t>接口定义了一个名叫accept的抽象方法，它接受泛型T的对象，没有返回（void）。</t></li><li>Function:java.util.function.Function&lt;T, R&gt;接口定义了一个叫作apply的抽象方法，它接受泛型T的对象，并返回一个泛型R的对象。</li><li>DoublePredicate、IntConsumer、LongBinaryOperator、IntFunction、ToIntFunction<t>、IntToDoubleFunction</t></li></ul></li></ol><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li>filter 筛选</li><li>distinct 去重 （据流所生成元素的hashCode和equals方法实现）</li><li>切片<ul><li>takeWhile 遭遇第一个不符合要求的元素时停止处理</li><li>dropWhile 它会从头开始，丢弃所有谓词结果为false的元素。一旦遭遇谓词计算的结果为true，它就停止处理，并返回所有剩余的元素，即便要处理的对象是一个由无限数量元素构成的流，它也能工作得很好</li></ul></li><li>limit 截短流</li><li>skip 跳过元素</li><li>map 映射 （使用映射一词，是因为它和转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）</li><li>flatMap 扁平化为一个流，把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流</li><li>allMatch 匹配所有元素</li><li>anyMatch 至少匹配一个</li><li>noneMatch 没有任何匹配元素</li><li>findAny 返回当前流中的任意元素</li><li>findFist  查找第一个元素</li></ol><h4 id="原始类型流特化"><a href="#原始类型流特化" class="headerlink" title="原始类型流特化"></a>原始类型流特化</h4><p>Java 8引入了三个原始类型特化流接口来解决这个问题：IntStream、DoubleStream和LongStream，分别将流中的元素特化为int、long和double，从而避免了暗含的装箱成本。</p><h5 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h5><p>mapToInt、mapToDouble和mapToLong</p><h5 id="转换回对象流"><a href="#转换回对象流" class="headerlink" title="转换回对象流"></a>转换回对象流</h5><p>boxed</p><h4 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h4><ol><li>range  不包含结束值</li><li>rangeClosed 包含结束值</li></ol><h4 id="构建流"><a href="#构建流" class="headerlink" title="构建流"></a>构建流</h4><h5 id="由值创建流"><a href="#由值创建流" class="headerlink" title="由值创建流"></a>由值创建流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; java = Stream.of(<span class="string">"java"</span>, <span class="string">"php"</span>, <span class="string">"js"</span>);</span><br><span class="line">Stream&lt;Object&gt; empty = Stream.empty(); <span class="comment">//创建空流</span></span><br></pre></td></tr></table></figure><h5 id="由数组创建流"><a href="#由数组创建流" class="headerlink" title="由数组创建流"></a>由数组创建流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] numbers = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">23</span>&#125;;</span><br><span class="line">IntStream stream = Arrays.stream(numbers);</span><br></pre></td></tr></table></figure><h5 id="由文件生成流"><a href="#由文件生成流" class="headerlink" title="由文件生成流"></a>由文件生成流</h5><h5 id="由函数生成无限流"><a href="#由函数生成无限流" class="headerlink" title="由函数生成无限流"></a>由函数生成无限流</h5><ol><li>Stream.iterate</li><li>Stream.generate</li></ol><p>​    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200626111451.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haominglfs.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haominglfs.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python学习</title>
    <link href="https://haominglfs.github.io/2020/05/15/python%E5%AD%A6%E4%B9%A0/"/>
    <id>https://haominglfs.github.io/2020/05/15/python%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-15T13:48:05.000Z</published>
    <updated>2020-05-15T14:14:43.843Z</updated>
    
    <content type="html"><![CDATA[<p><code>if__name__==&#39;__main__&#39;</code></p><p>在学习Python基础语法的时候，在程序最后经常会遇到这句话，这里简单解释下它的意义。总地来说，这句代码的作用是既能保证当前的.py文件直接运行，也能保证其可以作为模块被其他.py文件导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">()</span>:</span></span><br><span class="line">    print(__name__)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    getName()</span><br><span class="line">//输出__main__</span><br></pre></td></tr></table></figure><p>这说明，<code>__name__</code>本身是一个变量，但它不是一般的变量。实际上，它是在程序执行前就创建并赋值的，而赋值的机制是这里的关键。在当前程序被当作主程序被执行的时候，<code>__name__</code>自动被赋值为固定的字符串<code>__main__</code>；当它作为模块被其他文件调用的时候，自动被赋值为模块所在的文件名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;if__name__==&amp;#39;__main__&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在学习Python基础语法的时候，在程序最后经常会遇到这句话，这里简单解释下它的意义。总地来说，这句代码的作用是既能保证当前的.py文件直接运行，也能保证其可以作为模块被其
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java8时间API</title>
    <link href="https://haominglfs.github.io/2020/04/30/java8%E6%97%B6%E9%97%B4API/"/>
    <id>https://haominglfs.github.io/2020/04/30/java8%E6%97%B6%E9%97%B4API/</id>
    <published>2020-04-30T02:04:07.000Z</published>
    <updated>2020-04-30T09:30:59.538Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200430173025.png" alt></p><a id="more"></a><h3 id="Java8之前的日期时间API"><a href="#Java8之前的日期时间API" class="headerlink" title="Java8之前的日期时间API"></a>Java8之前的日期时间API</h3><h4 id="表示时刻信息的-Date"><a href="#表示时刻信息的-Date" class="headerlink" title="表示时刻信息的 Date"></a>表示时刻信息的 Date</h4><h5 id="Date的设计饱受诟病，其缺陷包括但不限于："><a href="#Date的设计饱受诟病，其缺陷包括但不限于：" class="headerlink" title="Date的设计饱受诟病，其缺陷包括但不限于："></a>Date的设计饱受诟病，其缺陷包括但不限于：</h5><ul><li>类名误导，该类实际上不仅反映日期，还反映时间</li><li>方法名误导，getDate()返回日期中的天，getDay()返回的是周几</li><li>年份是与1900年的差值，可读性极差</li><li>月份是从0计数的，可读性极差</li><li>周几是相对于周日的差值，可读性极差</li><li>不提供时区设置，内部总是使用本地时区</li><li>不提供历法设置，内部使用格里历或儒略历</li><li>不提供格式化的转换，从字符串中解析日期时相当难用</li><li>参数返回太随意，比如设置1月33日，实际是2月2日</li><li>存在同名类，java.sql包下依然有一个作用相同的Date类</li><li>该类允许扩展，实际上，应当把日期-时间类设计为不可变的final类</li></ul><h5 id="当前定位"><a href="#当前定位" class="headerlink" title="当前定位"></a>当前定位</h5><p>Date 的目前定位是，<strong>唯一表示一个时刻</strong>，现在的 Date 类中接近百分之八十的方法都已废弃，被标记为 @Deprecated。还有几个为数不多没有被废弃的方法：</p><ul><li><code>public long getTime()</code>：返回内部存储的毫秒数</li><li><code>public void setTime(long time)</code>：重新设置内存的毫秒数</li><li><code>public boolean before(Date when)</code>：比较给定的时刻是否早于当前 Date 实例</li><li><code>public boolean after(Date when)</code>：比较给定的时刻是否晚于当前 Date 实例</li></ul><h4 id="描述年历的-Calendar"><a href="#描述年历的-Calendar" class="headerlink" title="描述年历的 Calendar"></a>描述年历的 Calendar</h4><p>Calendar 用于表示年月日等日期信息，它是一个抽象类，一般通过以下四种工厂方法获取它的实例对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(TimeZone zone)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(Locale aLocale)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(TimeZone zone,Locale aLocale)</span></span></span><br><span class="line"><span class="function"><span class="comment">//最终调用的方法，因为不同的时区与国家语言对于时刻和年月日信息的输出是不同的，所以这也是为什么一个 Calendar 实例必须传入时区和国家信息的一个原因</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone,Locale aLocale)</span></span></span><br></pre></td></tr></table></figure><h4 id="DateFormat-格式化转换"><a href="#DateFormat-格式化转换" class="headerlink" title="DateFormat 格式化转换"></a>DateFormat 格式化转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</span><br><span class="line"><span class="comment">//将一个日期对象格式化为字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function"><span class="comment">//将一个格式化的字符串装换为一个日期对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br></pre></td></tr></table></figure><ul><li><p>yyyy：年份用四位进行输出</p></li><li><p>MM：月份用两位进行输出</p></li><li><p>dd：两位表示日信息</p></li><li><p>HH：两位来表示小时数</p></li><li><p>mm：两位表示分钟数</p></li><li><p>ss：两位来表示秒数</p></li><li><p>E：表示周几，如果 Locale 在中国则会输出 星期x，如果在美国或英国则会输出英文的星期</p></li><li><p>a：表示上午或下午</p></li></ul><h3 id="Java8-的时间日期-API"><a href="#Java8-的时间日期-API" class="headerlink" title="Java8 的时间日期 API"></a>Java8 的时间日期 API</h3><p>Java 8的日期和时间类包括Instant、Duration、Period、LocalDate、LocalTime、LocalDateTime，这些类都包含在java.time包中。</p><h4 id="表示时刻的-Instant"><a href="#表示时刻的-Instant" class="headerlink" title="表示时刻的 Instant"></a>表示时刻的 Instant</h4><p>Instant是时间线上的一个点，表示一个时间戳。Instant可以精确到纳秒，这超过了long的最大表示范围，所以在Instant的实现中是分成了两部分来表示，一部分是<code>seconds</code>，表示从1970-01-01 00:00:00开始到现在的秒数，另一个部分是<code>nanos</code>，表示纳秒部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据系统当前时间创建一个 Instant 实例，表示当前时刻</span></span><br><span class="line">Instant now = Instant.now(); </span><br><span class="line"><span class="comment">//通过传入一个标准时间的偏移值来构建一个 Instant 实例</span></span><br><span class="line">Instant instant = Instant.ofEpochSecond(<span class="keyword">long</span> epochSecond, <span class="keyword">long</span> nanoAdjustment);</span><br><span class="line"><span class="comment">//通过毫秒数值直接构建一个 Instant 实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Instant <span class="title">ofEpochMilli</span><span class="params">(<span class="keyword">long</span> epochMilli)</span>；</span></span><br></pre></td></tr></table></figure><h4 id="时间段Duration"><a href="#时间段Duration" class="headerlink" title="时间段Duration"></a>时间段Duration</h4><p>Duration是两个时间戳的差值，使用java.time中的时间戳类，例如Instant、LocalDateTime等实现了Temporal类的日期时间类为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime from = LocalDateTime.of(<span class="number">2020</span>,<span class="number">4</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">LocalDateTime to = LocalDateTime.of(<span class="number">2020</span>,<span class="number">5</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">Duration duration = Duration.between(from, to);</span><br><span class="line"></span><br><span class="line">Duration duration1 = Duration.of(<span class="number">5</span>, ChronoUnit.DAYS);       <span class="comment">// 5天</span></span><br><span class="line">Duration duration2 = Duration.of(<span class="number">1000</span>, ChronoUnit.MILLIS);  <span class="comment">// 1000毫秒</span></span><br></pre></td></tr></table></figure><h4 id="日期段Period"><a href="#日期段Period" class="headerlink" title="日期段Period"></a>日期段Period</h4><p>Period是以年月日来衡量一个时间段，由于Period是以年月日衡量时间段，所以between()方法只能接收LocalDate类型的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2020-03-22 到 2020-04-22 这段时间</span></span><br><span class="line">Period period = Period.between(LocalDate.of(<span class="number">2020</span>, <span class="number">3</span>, <span class="number">22</span>),LocalDate.of(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">22</span>));</span><br></pre></td></tr></table></figure><h4 id="处理日期的-LocalDate"><a href="#处理日期的-LocalDate" class="headerlink" title="处理日期的 LocalDate"></a>处理日期的 LocalDate</h4><p>LocalDate 是一个不可变类，它关注时间中年月日部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用当前系统时间的年月日信息初始化一个实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显式指定年月日信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">of</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> dayOfMonth)</span></span>;</span><br><span class="line"><span class="comment">//根据 dayOfYear 可以推出 month 和 dayOfMonth</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">ofYearDay</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> dayOfYear)</span></span>;</span><br><span class="line"><span class="comment">//相对于格林零时区时间的日偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">ofEpochDay</span><span class="params">(<span class="keyword">long</span> epochDay)</span></span>;</span><br><span class="line"></span><br><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">22</span>);     <span class="comment">// 初始化一个日期：2022-04-22</span></span><br><span class="line"><span class="keyword">int</span> year = localDate.getYear();                     <span class="comment">// 年份：2020</span></span><br><span class="line">Month month = localDate.getMonth();                 <span class="comment">// 月份：MARCH</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth = localDate.getDayOfMonth();         <span class="comment">// 月份中的第几天：22</span></span><br><span class="line">DayOfWeek dayOfWeek = localDate.getDayOfWeek();     <span class="comment">// 一周的第几天：FRIDAY</span></span><br><span class="line"><span class="keyword">int</span> length = localDate.lengthOfMonth();             <span class="comment">// 月份的天数：30</span></span><br><span class="line"><span class="keyword">boolean</span> leapYear = localDate.isLeapYear();          <span class="comment">// 是否为闰年：true</span></span><br></pre></td></tr></table></figure><h4 id="处理时间的-LocalTime"><a href="#处理时间的-LocalTime" class="headerlink" title="处理时间的 LocalTime"></a>处理时间的 LocalTime</h4><p>类似于 LocalDate，LocalTime 专注于时间的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据系统当前时刻获取其中的时间部分内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显式传入小时和分钟来构建一个实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">of</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute)</span></span>;</span><br><span class="line"><span class="comment">//通过传入时分秒构造实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">of</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second)</span></span>;</span><br><span class="line"><span class="comment">//传入时分秒和纳秒构建一个实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">of</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second, <span class="keyword">int</span> nanoOfSecond)</span></span>;</span><br><span class="line"><span class="comment">//传入一个长整型数值代表当前日已经过去的秒数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">ofSecondOfDay</span><span class="params">(<span class="keyword">long</span> secondOfDay)</span></span>;</span><br><span class="line"><span class="comment">//传入一个长整型代表当前日已经过去的纳秒数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">ofNanoOfDay</span><span class="params">(<span class="keyword">long</span> nanoOfDay)</span></span>;</span><br><span class="line"></span><br><span class="line">LocalTime localTime = LocalTime.of(<span class="number">16</span>, <span class="number">25</span>, <span class="number">52</span>);     <span class="comment">// 初始化一个时间：16:25:52</span></span><br><span class="line"><span class="keyword">int</span> hour = localTime.getHour();                     <span class="comment">// 时：16</span></span><br><span class="line"><span class="keyword">int</span> minute = localTime.getMinute();                 <span class="comment">// 分：25</span></span><br><span class="line"><span class="keyword">int</span> second = localTime.getSecond();                 <span class="comment">// 秒：52</span></span><br></pre></td></tr></table></figure><h4 id="处理日期和时间的-LocalDateTime"><a href="#处理日期和时间的-LocalDateTime" class="headerlink" title="处理日期和时间的 LocalDateTime"></a>处理日期和时间的 LocalDateTime</h4><p>LocalDateTime类是LocalDate和LocalTime的结合体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过of()方法直接创建</span></span><br><span class="line">LocalDateTime ldt1 = LocalDateTime.of(<span class="number">2020</span>, Month.FEBRUARY, <span class="number">22</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">12</span>);</span><br><span class="line"><span class="comment">//可以调用LocalDate的atTime()方法或LocalTime的atDate()方法将LocalDate或LocalTime合并成一个LocalDateTime</span></span><br><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2020</span>, Month.FEBRUARY, <span class="number">22</span>);</span><br><span class="line">LocalTime localTime = LocalTime.of(<span class="number">16</span>, <span class="number">23</span>, <span class="number">12</span>);</span><br><span class="line">LocalDateTime ldt2 = localDate.atTime(localTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//向LocalDate和LocalTime的转化</span></span><br><span class="line">LocalDate date = ldt1.toLocalDate();</span><br><span class="line">LocalTime time = ldt1.toLocalTime();</span><br></pre></td></tr></table></figure><h4 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h4><p>比较简单的日期操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比较简单的日期操作</span></span><br><span class="line">LocalDate date = LocalDate.of(<span class="number">2020</span>, <span class="number">4</span>, <span class="number">22</span>);          <span class="comment">// 2020-04-22</span></span><br><span class="line">LocalDate date1 = date.withYear(<span class="number">2021</span>);              <span class="comment">// 修改为 2021-04-22</span></span><br><span class="line">LocalDate date2 = date.withMonth(<span class="number">3</span>);                <span class="comment">// 修改为 2020-03-22</span></span><br><span class="line">LocalDate date3 = date.withDayOfMonth(<span class="number">1</span>);           <span class="comment">// 修改为 2020-04-01</span></span><br><span class="line">LocalDate date4 = date.plusYears(<span class="number">1</span>);                <span class="comment">// 增加一年 2021-04-22</span></span><br><span class="line">LocalDate date5 = date.minusMonths(<span class="number">2</span>);              <span class="comment">// 减少两个月，到2020年的2月</span></span><br><span class="line">LocalDate date6 = date.plus(<span class="number">5</span>, ChronoUnit.DAYS);    <span class="comment">// 增加5天 2020-04-27</span></span><br></pre></td></tr></table></figure><p>比较复杂的日期操作，比如将时间调到下一个工作日，或者是下个月的最后一天，这时候我们可以使用with()方法的另一个重载方法，它接收一个TemporalAdjuster参数，可以使我们更加灵活的调整日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回下一个距离当前时间最近的星期日</span></span><br><span class="line">LocalDate date7 = date.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));</span><br><span class="line"><span class="comment">// 返回本月最后衣蛾周六</span></span><br><span class="line">LocalDate date9 = date.with(TemporalAdjusters.lastInMonth(DayOfWeek.SATURDAY));</span><br></pre></td></tr></table></figure><p>下面列出时间调节器类TemporalAdjuster提供的一些方法</p><table><thead><tr><th><strong>方法名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>dayOfWeekInMonth</td><td>返回同一个月中每周的第几天</td></tr><tr><td>firstDayOfMonth</td><td>返回当月的第一天</td></tr><tr><td>firstDayOfNextMonth</td><td>返回下月的第一天</td></tr><tr><td>firstDayOfNextYear</td><td>返回下一年的第一天</td></tr><tr><td>firstDayOfYear</td><td>返回本年的第一天</td></tr><tr><td>firstInMonth</td><td>返回同一个月中第一个星期几</td></tr><tr><td>lastDayOfMonth</td><td>返回当月的最后一天</td></tr><tr><td>lastDayOfNextMonth</td><td>返回下月的最后一天</td></tr><tr><td>lastDayOfNextYear</td><td>返回下一年的最后一天</td></tr><tr><td>lastDayOfYear</td><td>返回本年的最后一天</td></tr><tr><td>lastInMonth</td><td>返回同一个月中最后一个星期几</td></tr><tr><td>next / previous</td><td>返回后一个/前一个给定的星期几</td></tr><tr><td>nextOrSame / previousOrSame</td><td>返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回</td></tr></tbody></table><h4 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h4><h5 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收一个“区域/城市”的字符串作为参数</span></span><br><span class="line">ZoneId shanghaiZoneId = ZoneId.of(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line"><span class="comment">//获取系统默认时区</span></span><br><span class="line">ZoneId systemZoneId = ZoneId.systemDefault();</span><br><span class="line"><span class="comment">//获取所有合法的“区域/城市”字符串</span></span><br><span class="line">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br></pre></td></tr></table></figure><h5 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h5><p>ZonedDateTime 可以被理解为 LocalDateTime 的外层封装，它的内部存储了一个 LocalDateTime 的实例，专门用于普通的日期时间处理。此外，它还定义了 ZoneId 和 ZoneOffset 来描述时区的概念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//系统将以默认时区计算并存储日期时间信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//指定时区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">now</span><span class="params">(ZoneId zone)</span></span>;</span><br><span class="line"><span class="comment">//指定日期时间和时区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">of</span><span class="params">(LocalDate date, LocalTime time, ZoneId zone)</span>：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">of</span><span class="params">(LocalDateTime localDateTime, ZoneId zone)</span></span></span><br><span class="line"><span class="function"><span class="comment">//通过时刻和时区构建实例对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZonedDateTime <span class="title">ofInstant</span><span class="params">(Instant instant, ZoneId zone)</span>：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//有了ZoneId，我们就可以将一个LocalDate、LocalTime或LocalDateTime对象转化为ZonedDateTime对象：</span></span></span><br><span class="line"><span class="function">LocalDateTime localDateTime </span>= LocalDateTime.now();</span><br><span class="line">ZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);</span><br></pre></td></tr></table></figure><h4 id="格式化日期时间"><a href="#格式化日期时间" class="headerlink" title="格式化日期时间"></a>格式化日期时间</h4><p>DateTimeFormatter 作为格式化日期时间的主要类，它与之前的 DateFormat 类最大的不同就在于它是线程安全的，其他的使用上的操作基本类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">formatter.format(localDateTime);</span><br><span class="line"></span><br><span class="line">String str = <span class="string">"2020年04月23日 23:59:59"</span>;</span><br><span class="line">DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">LocalDateTime localDateTime2 = LocalDateTime.parse(str,formatter2);</span><br></pre></td></tr></table></figure><h3 id="世界标准时间（UTC）-格林威治时间（GMT）"><a href="#世界标准时间（UTC）-格林威治时间（GMT）" class="headerlink" title="世界标准时间（UTC）/格林威治时间（GMT）"></a>世界标准时间（UTC）/格林威治时间（GMT）</h3><p>UTC是协调世界时(Universal Time Coordinated)英文缩写，是由国际无线电咨询委员会规定和推荐,并由<a href="https://www.baidu.com/s?wd=国际时间局&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">国际时间局</a>(BIH)负责保持的以秒为基础的时间标度。UTC相当于<a href="https://www.baidu.com/s?wd=本初子午线&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">本初子午线</a>(即经度0度)上的平均太阳时，过去曾用<a href="https://www.baidu.com/s?wd=格林威治&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">格林威治</a>平均时(GMT)来表示.<a href="https://www.baidu.com/s?wd=北京时间&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">北京时间</a>比UTC时间早8小时，以1999年1月1日0000UTC为例，UTC时间是零点，<a href="https://www.baidu.com/s?wd=北京时间&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">北京时间</a>为1999年1月1日早上8点整。</p><p>具体参考：<a href="https://pansci.asia/archives/84978" target="_blank" rel="noopener">https://pansci.asia/archives/84978</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/mcbye/p/java8-date-time-api.html" target="_blank" rel="noopener">https://www.cnblogs.com/mcbye/p/java8-date-time-api.html</a></p><p><a href="https://juejin.im/post/5addc7a66fb9a07aa43bd2a0#heading-5" target="_blank" rel="noopener">https://juejin.im/post/5addc7a66fb9a07aa43bd2a0#heading-5</a></p><p><a href="https://www.jianshu.com/p/68d8291c3bd5" target="_blank" rel="noopener">https://www.jianshu.com/p/68d8291c3bd5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200430173025.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haominglfs.github.io/categories/java/"/>
    
    
      <category term="java8 时间" scheme="https://haominglfs.github.io/tags/java8-%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>ideaVim安装配置</title>
    <link href="https://haominglfs.github.io/2020/04/29/ideaVim%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://haominglfs.github.io/2020/04/29/ideaVim%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2020-04-29T06:03:40.000Z</published>
    <updated>2020-06-25T08:32:50.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>和安装其它插件一样，直接在插件市场搜索ideaVim安装即可。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h4><p>ideaViim键与idea快捷键有冲突，可以在Editor Vim Emulation设置，我的快捷键设置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200429143559.png" alt></p><a id="more"></a><h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><ul><li>zo:打开折叠</li><li>zc:关闭折叠</li></ul><h3 id="ideavim配置文件讲解"><a href="#ideavim配置文件讲解" class="headerlink" title=".ideavim配置文件讲解"></a>.ideavim配置文件讲解</h3><h5 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h5><p>开发过idea插件的人都知道，在idea中，任何目录选项上的点击操作，工具栏上的按钮都会被映射为一个<code>action</code>。即点击对应的按钮或者选项，执行相应的<code>action</code>。理解很简单，这就是MVC的思想，比如springmvc， 一个访问路径映射为一个控制器中的方法这样子。</p><p>明白<code>action</code>映射这一点很重要。因为ideavim的插件支持使用vim命令执行对应的<code>action</code>。所以，这个设计逻辑就打通了vim和idea的交互，使得我们可以在vim中完成所有和idea相关的操作。</p><h5 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h5><p>vim的定位是文本编辑。所以在idea中一般情况下vim快捷键和命令生效的基本条件就是当前窗口焦点在编辑区。这是最基础的条件，如果你当前的快键键在<code>Project</code>或者<code>Run</code>这些侧边栏中，按vim的命令肯定是不会生效的。</p><p>明白了基本条件，那我们要做的第一件事也是最重要的事情就是在idea中，如何快速的将焦点回到的编辑区。答案是：Esc</p><p>这应该是使用vim的人最能接受的快捷键了。所以，到这里基本的操作思路就很明确，当前的焦点要么在编辑区外，要么在编辑区内。而返回编辑区的操作很简单，就是<code>Esc</code>。当焦点在编辑区的时候，就可以随心所欲的使用vim的指令和快捷键了。</p><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><p>有了idea基本的了解之后，我们就可以着手配置自己的vim了。ideavim插件的配置通常是<code>~/.ideavimrc</code>，所以将自己的配置脚本写在对应的文件中即可。当然如果你已经有了自己的vim配置文件在<code>~/.vimrc</code>下，那只需要在ideavim的配置文件中添加一行命令即可全部读取映射过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.vimrc</span><br></pre></td></tr></table></figure><p>在~目录下，创建.ideavimrc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"设置高亮搜索</span><br><span class="line">set hlsearch</span><br><span class="line"></span><br><span class="line">"重命名文件</span><br><span class="line">nnoremap &lt;Space&gt;rf :action RenameFile&lt;CR&gt;</span><br><span class="line">"跳到指定类</span><br><span class="line">nnoremap &lt;Space&gt;gc :action GotoClass&lt;CR&gt;</span><br><span class="line">"查找使用</span><br><span class="line">nnoremap &lt;Space&gt;fu :action FindUsages&lt;CR&gt;</span><br><span class="line">"跳转到方法的声明</span><br><span class="line">nnoremap &lt;Space&gt;gs :action GotoSuperMethod&lt;CR&gt;</span><br></pre></td></tr></table></figure><h5 id="在vim中执行idea的action"><a href="#在vim中执行idea的action" class="headerlink" title="在vim中执行idea的action"></a>在vim中执行idea的action</h5><p>为了执行idea中的<code>action</code>，ideavim有两个额外的命令来支持这一操作。</p><ul><li><code>:actionlist [pattern]</code></li><li><code>:action {actionName}</code></li></ul><p>第一个命令actionlist是帮助查看idea中有哪些命令。第二个命令是执行对应的<code>action</code>这样子。有了这两个命令的帮助我们就可以在ideavim的配置文件中使用map命令来映射idea的<code>action</code>到vim的快捷键中。</p><h2 id="Vim-中的-remap，noremap"><a href="#Vim-中的-remap，noremap" class="headerlink" title="Vim 中的 remap，noremap"></a>Vim 中的 remap，noremap</h2><p><code>remap</code>是一个使映射以递归方式工作的<strong>选项</strong> 。</p><p><code>:map</code>和<code>:noremap</code>是各种映射命令的<strong>递归</strong>和<strong>非递归</strong>版本。这意味着，如果你这样做：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:map j gg</span><br><span class="line">:map Q j</span><br><span class="line">:noremap W j</span><br></pre></td></tr></table></figure><p><code>j</code>将映射到<code>gg</code> 。 <code>Q</code> <em>也</em>将映射到<code>gg</code> ，因为<code>j</code>将被扩展用于递归映射。 <code>W</code>将被映射到<code>j</code> （而不是<code>gg</code> ），因为<code>j</code>不会针对非递归映射进行扩展。</p><p>现在请记住，Vim 是一个<strong>模态编辑器</strong> 。它具有<strong>普通</strong>模式， <strong>可视</strong>模式和其他模式。</p><p>对于这些映射集中的每一个，都有一个<a href="http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1" target="_blank" rel="noopener">映射</a>#Creating_keymaps)可以在正常，可视，选择和操作员模式下工作（ <code>:map</code>和<code>:noremap</code> ），一个在普通模式下工作（ <code>:nmap</code>和<code>:nnoremap</code> ），一个在可视模式下（ <code>:vmap</code>和<code>:vnoremap</code> ）等等。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://programtip.com/zh/art-127704" target="_blank" rel="noopener">https://programtip.com/zh/art-127704</a></p><p><a href="https://blog.csdn.net/qq_40250122/article/details/102054921" target="_blank" rel="noopener">https://blog.csdn.net/qq_40250122/article/details/102054921</a></p><p><a href="https://my.oschina.net/funcy/blog/1832719" target="_blank" rel="noopener">https://my.oschina.net/funcy/blog/1832719</a></p><p><a href="https://blog.csdn.net/CoderBruis/article/details/94735816" target="_blank" rel="noopener">https://blog.csdn.net/CoderBruis/article/details/94735816</a></p><p><a href="https://routinepanic.com/questions/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping" target="_blank" rel="noopener">https://routinepanic.com/questions/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;和安装其它插件一样，直接在插件市场搜索ideaVim安装即可。&lt;/p&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;h4 id=&quot;快捷键设置&quot;&gt;&lt;a href=&quot;#快捷键设置&quot; class=&quot;headerlink&quot; title=&quot;快捷键设置&quot;&gt;&lt;/a&gt;快捷键设置&lt;/h4&gt;&lt;p&gt;ideaViim键与idea快捷键有冲突，可以在Editor Vim Emulation设置，我的快捷键设置如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200429143559.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="idea" scheme="https://haominglfs.github.io/categories/idea/"/>
    
    
      <category term="idea" scheme="https://haominglfs.github.io/tags/idea/"/>
    
      <category term="vim" scheme="https://haominglfs.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>ELK安装配置</title>
    <link href="https://haominglfs.github.io/2020/04/16/ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://haominglfs.github.io/2020/04/16/ELK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</id>
    <published>2020-04-16T13:54:25.000Z</published>
    <updated>2020-04-21T13:58:00.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ELK常见架构"><a href="#ELK常见架构" class="headerlink" title="ELK常见架构"></a>ELK常见架构</h3><h4 id="Elasticsearch-Logstash-Kibana"><a href="#Elasticsearch-Logstash-Kibana" class="headerlink" title="Elasticsearch + Logstash + Kibana"></a>Elasticsearch + Logstash + Kibana</h4><p>这是一种最简单的架构。这种架构，通过logstash收集日志，Elasticsearch分析日志，然后在Kibana(web界面)中展示。这种架构虽然是官网介绍里的方式，但是往往在生产中很少使用。</p><h4 id="Elasticsearch-Logstash-filebeat-Kibana"><a href="#Elasticsearch-Logstash-filebeat-Kibana" class="headerlink" title="Elasticsearch + Logstash + filebeat + Kibana"></a>Elasticsearch + Logstash + filebeat + Kibana</h4><p>与上一种架构相比，这种架构增加了一个filebeat模块。filebeat是一个轻量的日志收集代理，用来部署在客户端，优势是消耗非常少的资源(较logstash)， 所以生产中，往往会采取这种架构方式，但是这种架构有一个缺点，当logstash出现故障， 会造成日志的丢失。</p><h4 id="Elasticsearch-Logstash-filebeat-redis-也可以是其他中间件，比如kafka-Kibana"><a href="#Elasticsearch-Logstash-filebeat-redis-也可以是其他中间件，比如kafka-Kibana" class="headerlink" title="Elasticsearch + Logstash + filebeat + redis(也可以是其他中间件，比如kafka) + Kibana"></a>Elasticsearch + Logstash + filebeat + redis(也可以是其他中间件，比如kafka) + Kibana</h4><p>这种架构是上面那个架构的完善版，通过增加中间件，来避免数据的丢失。当Logstash出现故障，日志还是存在中间件中，当Logstash再次启动，则会读取中间件中积压的日志。</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416220019.png" alt></p><a id="more"></a><h3 id="filebeat安装部署"><a href="#filebeat安装部署" class="headerlink" title="filebeat安装部署"></a>filebeat安装部署</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200420164241.png" alt></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Filebeat是一个日志文件托运工具，在你的服务器上安装客户端后，filebeat会监控日志目录或者指定的日志文件，追踪读取这些文件（追踪文件的变化，不停的读），并且转发这些信息到elasticsearch或者logstarsh、redis中存放。</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>filebeat由2个主要组件构成：prospector和harvesters。这两类组件一起协同完成Filebeat的工作，从指定文件中把数据读取出来，然后发送事件数据到配置的output中。</p><p>harvesters：主要负责进行单个文件的内容收集；在运行过程中，每一个Harvester会对一个文件逐行进行内容读取，并且把读写到的内容发送到配置的output中。</p><p>Prospector负责管理Harvsters，并且找到所有需要进行读取的数据源。如果input type配置的是log类，Prospector将会去配置度路径下查找所有能匹配上的文件，然后为每一个文件创建一个Harvster。每个Prospector都运行在自己的Go routine里。</p><p>当你开启filebeat程序的时候，它会启动一个或多个探测器（prospectors）去检测你指定的日志目录或文件，对于探测器找出的每一个日志文件，filebeat启动收割进程（harvester），每一个收割进程读取一个日志文件的新内容，并发送这些新的日志数据到处理程序（spooler），处理程序会集合这些事件，最后filebeat会发送集合的数据到你指定的地点。    </p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.2.2-x86_64.rpm</span><br><span class="line">sudo rpm -vi filebeat-5.2.2-x86_64.rpm</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">=========================== Filebeat prospectors =============================</span></span><br><span class="line"><span class="meta">#</span><span class="bash">filebeat.prospectors模块用来指定日志文件的来源。</span></span><br><span class="line">filebeat.prospectors:</span><br><span class="line">- input_type: log #input_type 指定日志类型，在这里是log， 应该也可以是json</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:  #paths指定日志文件路径。</span><br><span class="line">    - /root/myapp/tomcat/tomcat8/logs/*.log</span><br><span class="line"><span class="meta">#</span><span class="bash">================================ redis =====================================</span></span><br><span class="line">output.redis:</span><br><span class="line">    hosts: ["152.136.233.203:6379"]</span><br><span class="line">    password: "redis"</span><br><span class="line">    datatype: list</span><br><span class="line">    key: "tomcat-log"</span><br><span class="line">    db: 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">document_type：这个字段是用来给日志打标记的。 </span></span><br><span class="line"><span class="meta">#</span><span class="bash">fields: 也是打标记，主要为了后面日志分析查找的方便，存储的时候也会根据fields分类存储，相同fields的数据存在同一个redis key中</span></span><br><span class="line"><span class="meta">#</span><span class="bash">fields_under_root: 如果该选项设置为<span class="literal">true</span>， 则该fields会存储在top-level中。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">tail_files: 这个选项如果设置为<span class="literal">true</span>，则读取日志文件的新内容，而忽略原有的内容，一般要设置为<span class="literal">true</span></span></span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start filebeat</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol><li><p>filebeat怎么设置从头开始读取</p><ol><li><p>找到registry文件的位置，如果没有单独配置那么文件路径为<code>/var/lib/filebeat/registry</code>，不在也没关心，可以直接find命令查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name registry</span><br></pre></td></tr></table></figure></li><li><p>关闭filebeat –&gt; 删掉registry文件 –&gt; 启动filebeat</p></li></ol></li><li><p>Filebeat插件启动失败，不能直接查找报错原因</p><p>老是在filebeat启动的这一步骤上出错，但是由于filebeat是由systemd启动的，因此原因也经常查不清楚，因此并不能直观的查出错误在哪里，所以今天教给大家两个寻找错误的根源的方法:</p><p>直接使用filebeat的启动方法，而不使用systemctl start filebeat来启动。比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/filebeat/bin/filebeat -c /etc/filebeat/filebeat.yml -path.home /usr/share/filebeat -path.config /etc/filebeat -path.data /var/lib/filebeat -path.logs /var/log/filebeat</span><br></pre></td></tr></table></figure></li></ol><h3 id="logstash-安装配置"><a href="#logstash-安装配置" class="headerlink" title="logstash 安装配置"></a>logstash 安装配置</h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.2.tar.gz</span><br><span class="line">tar xf logstash-5.2.0.tar.gz -C /opt/app/</span><br></pre></td></tr></table></figure><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/ls-data  #创建/data/ls-data目录，用于logstash数据的存放</span><br><span class="line">chown -R logstash:logstash /data/ls-data #修改该目录的拥有者为logstash</span><br><span class="line">mkdir -p /log/ls-log #创建/data/ls-log目录，用于logstash日志的存放</span><br><span class="line">chown -R logstash:logstash /log/ls-log #修改该目录的拥有者为logstash</span><br></pre></td></tr></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /config/logstash/config.d</span><br><span class="line">vim logstash.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">    host =&gt; "localhost"</span><br><span class="line">    port =&gt; "6379"</span><br><span class="line">    db =&gt; "1"</span><br><span class="line">    data_type =&gt; "list"</span><br><span class="line">    key =&gt; "tomcat-log"</span><br><span class="line">    codec =&gt; plain &#123;</span><br><span class="line">          charset =&gt; "UTF-8"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; </span><br><span class="line">  hosts =&gt; ["localhost:9200"] </span><br><span class="line">  index =&gt; "tomcat-log"</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input是redis， 需要指定redis的host 和port以及db，还要指明数据的类型，list表示这是一个redis的list对象。key指明redis中的key名称。</p><p>output 是elasticsearch， hosts指明elasticsearch的ip和端口，index指明这个日志存在elasticsearch中的索引名称。</p><h4 id="修改配置文件-opt-logstash-5-2-2-config-logstash-yml"><a href="#修改配置文件-opt-logstash-5-2-2-config-logstash-yml" class="headerlink" title="修改配置文件(/opt/logstash-5.2.2/config/logstash.yml)"></a>修改配置文件(/opt/logstash-5.2.2/config/logstash.yml)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置数据的存储路径为/data/ls-data</span></span><br><span class="line">path.data: /data/ls-data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置管道配置文件路径为/etc/logstash/conf.d</span></span><br><span class="line">path.config: /etc/logstash/conf.d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置日志文件的存储路径为/<span class="built_in">log</span>/ls-log</span></span><br><span class="line">path.logs: /log/ls-log</span><br></pre></td></tr></table></figure><h5 id="测试logstash"><a href="#测试logstash" class="headerlink" title="测试logstash"></a>测试logstash</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./logstash -f /config/logstash/config.d/logstash.conf --config.test_and_exit</span><br><span class="line"><span class="meta">#</span><span class="bash">--config.test_and_exit表示，检查测试创建的logstash.conf配置文件，是否有问题，如果没有问题，执行之后，显示Configuration OK 证明配置成功！</span></span><br></pre></td></tr></table></figure><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/share/logstash/bin/logstash -f /etc/logstash/conf.d/logstash.conf &amp;</span><br></pre></td></tr></table></figure><h3 id="elasticsearch安装"><a href="#elasticsearch安装" class="headerlink" title="elasticsearch安装"></a>elasticsearch安装</h3><h4 id="下载-2"><a href="#下载-2" class="headerlink" title="下载"></a>下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.2.tar.gz</span><br><span class="line">tar -xvf elasticsearch-5.2.2.tar.gz -C  /opt/app/</span><br></pre></td></tr></table></figure><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/es-data #创建/data/es-data目录，用于elasticsearch数据的存放</span><br><span class="line">chown -R elasticsearch:elasticsearch /data/es-data  #修改该目录的拥有者为elasticsearch</span><br><span class="line">mkdir -p /log/es-log   #创建/data/es-log目录，用于elasticsearch日志的存放</span><br><span class="line">chown -R elasticsearch:elasticsearch /log/es-log #修改该目录的拥有者为elasticsearch</span><br></pre></td></tr></table></figure><h4 id="修改配置文件-opt-elasticsearch-5-2-2-config-elasticsearch-yml"><a href="#修改配置文件-opt-elasticsearch-5-2-2-config-elasticsearch-yml" class="headerlink" title="修改配置文件 (/opt/elasticsearch-5.2.2/config/elasticsearch.yml)"></a>修改配置文件 (/opt/elasticsearch-5.2.2/config/elasticsearch.yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置data存放的路径为/data/es-data</span></span><br><span class="line"><span class="string">path.data:</span> <span class="string">/data/es-data</span></span><br><span class="line"><span class="comment">#设置logs日志的路径为/log/es-log</span></span><br><span class="line"><span class="string">path.logs:</span> <span class="string">/log/es-log</span></span><br><span class="line"><span class="comment">#设置内存不使用交换分区</span></span><br><span class="line"><span class="string">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#配置了bootstrap.memory_lock为true时反而会引发9200不会被监听，原因不明</span></span><br><span class="line"><span class="comment">#设置允许所有ip可以连接该elasticsearch</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#开启监听的端口为9200</span></span><br><span class="line"><span class="string">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment">#增加新的参数，为了让elasticsearch-head插件可以访问es (5.x版本，如果没有可以自己手动加)</span></span><br><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h4 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h4><p><strong><em>注意，如果你使用root用户启动elasticsearch，就会报错，启动失败，这是因为elasticsearch不允许用root用户启动。可以创建一个用户，用来启动elasticsearch</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd elasticsearch  #添加组</span><br><span class="line">useradd -g elasticsearch elasticsearch #添加用户</span><br><span class="line">chown -R elasticsearch:elasticsearch  /opt/app/elasticsearch-5.2.2/ #设置权限</span><br><span class="line">/opt/app/elasticsearch-5.2.2/bin/elasticsearch -d  #启动，后台运行</span><br></pre></td></tr></table></figure><h3 id="kibana安装配置"><a href="#kibana安装配置" class="headerlink" title="kibana安装配置"></a>kibana安装配置</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-5.2.2-linux-x86_64.tar.gz</span><br><span class="line">tar -xzf kibana-5.2.2-linux-x86_64.tar.gz -C /opt/app/</span><br></pre></td></tr></table></figure><h4 id="配置-opt-app-kibana-5-2-2-linux-x86-64-config-kibana-yml"><a href="#配置-opt-app-kibana-5-2-2-linux-x86-64-config-kibana-yml" class="headerlink" title="配置(/opt/app/kibana-5.2.2-linux-x86_64/config/kibana.yml)"></a>配置(/opt/app/kibana-5.2.2-linux-x86_64/config/kibana.yml)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.host: "0.0.0.0" #指明服务运行的地址</span><br><span class="line">elasticsearch.url: "http://localhost:9200" #指明elasticsearch运行的地址和端口</span><br><span class="line">kibana.index: ".kibana"  #指明kibana使用的索引，这个是自定义的。</span><br></pre></td></tr></table></figure><h4 id="启动-3"><a href="#启动-3" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/app/kibana-5.2.2-linux-x86_64/bin/kibana</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/e7362ccfe7e3" target="_blank" rel="noopener">https://www.jianshu.com/p/e7362ccfe7e3</a></p><p><a href="http://www.justdojava.com/2019/08/11/elk-install/" target="_blank" rel="noopener">http://www.justdojava.com/2019/08/11/elk-install/</a></p><p><a href="https://blog.51cto.com/liqingbiao/2177873" target="_blank" rel="noopener">https://blog.51cto.com/liqingbiao/2177873</a></p><p><a href="https://www.cnblogs.com/FengGeBlog/p/10644170.html" target="_blank" rel="noopener">https://www.cnblogs.com/FengGeBlog/p/10644170.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ELK常见架构&quot;&gt;&lt;a href=&quot;#ELK常见架构&quot; class=&quot;headerlink&quot; title=&quot;ELK常见架构&quot;&gt;&lt;/a&gt;ELK常见架构&lt;/h3&gt;&lt;h4 id=&quot;Elasticsearch-Logstash-Kibana&quot;&gt;&lt;a href=&quot;#Elasticsearch-Logstash-Kibana&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch + Logstash + Kibana&quot;&gt;&lt;/a&gt;Elasticsearch + Logstash + Kibana&lt;/h4&gt;&lt;p&gt;这是一种最简单的架构。这种架构，通过logstash收集日志，Elasticsearch分析日志，然后在Kibana(web界面)中展示。这种架构虽然是官网介绍里的方式，但是往往在生产中很少使用。&lt;/p&gt;
&lt;h4 id=&quot;Elasticsearch-Logstash-filebeat-Kibana&quot;&gt;&lt;a href=&quot;#Elasticsearch-Logstash-filebeat-Kibana&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch + Logstash + filebeat + Kibana&quot;&gt;&lt;/a&gt;Elasticsearch + Logstash + filebeat + Kibana&lt;/h4&gt;&lt;p&gt;与上一种架构相比，这种架构增加了一个filebeat模块。filebeat是一个轻量的日志收集代理，用来部署在客户端，优势是消耗非常少的资源(较logstash)， 所以生产中，往往会采取这种架构方式，但是这种架构有一个缺点，当logstash出现故障， 会造成日志的丢失。&lt;/p&gt;
&lt;h4 id=&quot;Elasticsearch-Logstash-filebeat-redis-也可以是其他中间件，比如kafka-Kibana&quot;&gt;&lt;a href=&quot;#Elasticsearch-Logstash-filebeat-redis-也可以是其他中间件，比如kafka-Kibana&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch + Logstash + filebeat + redis(也可以是其他中间件，比如kafka) + Kibana&quot;&gt;&lt;/a&gt;Elasticsearch + Logstash + filebeat + redis(也可以是其他中间件，比如kafka) + Kibana&lt;/h4&gt;&lt;p&gt;这种架构是上面那个架构的完善版，通过增加中间件，来避免数据的丢失。当Logstash出现故障，日志还是存在中间件中，当Logstash再次启动，则会读取中间件中积压的日志。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200416220019.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="日志" scheme="https://haominglfs.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Elasticsearch Logstash Kibana" scheme="https://haominglfs.github.io/tags/Elasticsearch-Logstash-Kibana/"/>
    
  </entry>
  
  <entry>
    <title>类图</title>
    <link href="https://haominglfs.github.io/2020/04/06/%E7%B1%BB%E5%9B%BE/"/>
    <id>https://haominglfs.github.io/2020/04/06/%E7%B1%BB%E5%9B%BE/</id>
    <published>2020-04-06T03:25:22.000Z</published>
    <updated>2020-04-16T13:54:35.291Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集合类图"><a href="#集合类图" class="headerlink" title="集合类图"></a>集合类图</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200406141848.png" alt></p><a id="more"></a><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200406150924.png" alt></p><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h4 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200415194212.png" alt="InputStream"></p><h5 id="FilterInputStream剖析"><a href="#FilterInputStream剖析" class="headerlink" title="FilterInputStream剖析"></a>FilterInputStream剖析</h5><p>这个类的特殊之处，就是包含了一个InputStream，使得可以在这个InputStream基础上进行多种封装，从而达到装饰的目的。</p><p>装饰者模式，顾名思义，是对原有类进行了一定的装饰，装饰后的类必须和原有的类拥有相同的方法，当然，可以在原有类的基础上进行扩展。</p><p>这里的装饰者模式通过包含一个原有的Inputstream对象，并且将InputStream原有的方法或直接暴露，或进行装饰后暴露，又或者添加了新的特性，如DataInputStream中的readInt()，BufferedInputStream中的缓存功能。</p><p>为什么InputStream选择装饰者模式，而非直接继承的方法来扩展，这就是装饰者模式VS继承。如果单纯的使用继承，就会造成类的“爆炸”式增长。</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200415204429.png" alt></p><p>直接使用继承，可以实现“目的”和“方法”，但是每一种来源的输入流，都需要改善流读取方法，因此在使用继承时，每一个InputStream的子类都需要DataInputStream，BufferedInputStream这几个类提供的“装饰作用”的功能，因此需要的类的数目就是A*B的数目。</p><p>而直接使用装饰者模式，将InputStream的几个直接子类进一步抽象，在此基础上提供装饰作用，所需要的类的数目是A+B。使用装饰者模式使得java类的更有层次性，类的数目得到充分控制。这就是装饰者模式相比于继承的优势。</p><h4 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416173453.png" alt></p><h4 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416174538.png" alt></p><h4 id="字符输入流-1"><a href="#字符输入流-1" class="headerlink" title="字符输入流"></a>字符输入流</h4><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200416190044.png" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/zhao123h/java/article/details/52826682" target="_blank" rel="noopener">https://blog.csdn.net/zhao123h/java/article/details/52826682</a></p><p><a href="https://blog.csdn.net/zhoupenglei/article/details/46312405" target="_blank" rel="noopener">https://blog.csdn.net/zhoupenglei/article/details/46312405</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;集合类图&quot;&gt;&lt;a href=&quot;#集合类图&quot; class=&quot;headerlink&quot; title=&quot;集合类图&quot;&gt;&lt;/a&gt;集合类图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/haominglfs/images/20200406141848.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haominglfs.github.io/categories/java/"/>
    
    
      <category term="类图 java" scheme="https://haominglfs.github.io/tags/%E7%B1%BB%E5%9B%BE-java/"/>
    
  </entry>
  
  <entry>
    <title>jvm性能监控与调优</title>
    <link href="https://haominglfs.github.io/2020/03/23/jvm%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98/"/>
    <id>https://haominglfs.github.io/2020/03/23/jvm%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98/</id>
    <published>2020-03-23T15:10:24.000Z</published>
    <updated>2020-04-06T03:20:08.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jvm参数类型"><a href="#jvm参数类型" class="headerlink" title="jvm参数类型"></a>jvm参数类型</h3><a id="more"></a><ul><li><p>标准参数(jvm各个版本基本不变)</p><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-help  </span><br><span class="line">-server </span><br><span class="line">-client </span><br><span class="line">-version </span><br><span class="line">-cp </span><br><span class="line">-classpath</span><br></pre></td></tr></table></figure></li></ul></li><li><p>X参数（非标准化参数，变化比较小）</p><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xint 解释执行</span><br><span class="line">-Xcomp 第一次使用就编译成本地代码</span><br><span class="line">-Xmixed 混合模式，JVM自己来决定是否编译成本地代码</span><br></pre></td></tr></table></figure></li></ul></li><li><p>XX参数（用的比较多，主要用来JVM调优和debug）</p><ul><li><p>Boolean类型</p><p>格式：-XX:[+-]<name>表示启用或者禁用name属性</name></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+UseG1GC</span><br></pre></td></tr></table></figure></li><li><p>非Boolean类型</p><p>格式：-XX:<name>=<value> 表示name属性的值是value</value></name></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxGCPauseMillis=500</span><br><span class="line">XX:GCTimeRatio=19</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-Xms -Xmx 属于XX参数</span></span><br><span class="line">-Xms 等价于 -XX:InitialHeapSize</span><br><span class="line">-Xmx 等价于 -XX:MaxHeapSize</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="查看jvm运行时参数"><a href="#查看jvm运行时参数" class="headerlink" title="查看jvm运行时参数"></a>查看jvm运行时参数</h3><ul><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintFlagsInitial 查看初始值</span><br><span class="line">-XX:+PrintFlagsFinal  查看最终值</span><br><span class="line">-XX:+UnlockExperimentalVMOptions 解锁实验参数</span><br><span class="line">-XX:+UnlockDiagnosticVMOptions 解锁诊断参数</span><br><span class="line">-XX:+PrintCommandLineFlags  打印命令行参数</span><br></pre></td></tr></table></figure></li><li><p><code>-XX:+PrintFlagsFinal</code>  </p><p><code>java  -XX:+PrintFlagsFinal -version</code></p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200323234316.png" alt></p><p>=表示默认值</p><p>:=被用户或者jvm修改后的值</p></li><li><p>jinfo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flags 55208  打印被修改过的jvm参数值</span><br><span class="line">jinfo -flag &lt;name&gt; 55208  打印对应name的参数值</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200323234724.png" alt></p></li></ul><h3 id="查看jvm统计信息"><a href="#查看jvm统计信息" class="headerlink" title="查看jvm统计信息"></a>查看jvm统计信息</h3><ul><li><p>jstat</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200323235354.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options: </span><br><span class="line"> -class 类装载</span><br><span class="line"> -compiler JIT编译信息</span><br><span class="line"> -gc 垃圾回收信息</span><br></pre></td></tr></table></figure><ul><li><p>类装载</p></li><li><p>垃圾收集</p><p>S0C S1C S0U S1U : S0与S1的总量与使用量</p><p>EC EU ：Eden区总量与使用量</p><p>OC OU：Old区的总量与使用量</p><p>MC MU：Metaspace 区总量与使用量</p><p>CCSC CCSU：压缩类空间总量与使用量</p><p>YGC YGCT ：YongGC的次数与时间</p><p>FGC FGCT：FullGC的次数与时间</p><p>GCT：总的GC时间</p></li><li><p>JIT编译</p><p><img src="https://cdn.jsdelivr.net/gh/haominglfs/images/20200324001144.png" alt></p></li></ul></li></ul><h3 id="导出内存映像文件"><a href="#导出内存映像文件" class="headerlink" title="导出内存映像文件"></a>导出内存映像文件</h3><ul><li><p>内存溢出自动导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath=./</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用jmap命令手动导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heap.hprof &lt;虚拟机id&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;jvm参数类型&quot;&gt;&lt;a href=&quot;#jvm参数类型&quot; class=&quot;headerlink&quot; title=&quot;jvm参数类型&quot;&gt;&lt;/a&gt;jvm参数类型&lt;/h3&gt;
    
    </summary>
    
    
      <category term="jvm" scheme="https://haominglfs.github.io/categories/jvm/"/>
    
    
      <category term="jvm" scheme="https://haominglfs.github.io/tags/jvm/"/>
    
  </entry>
  
</feed>
